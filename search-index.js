var searchIndex = new Map(JSON.parse('[["xm125_radar_monitor",{"t":"SSCHHCHCHHCHHHCHPPPPPFPPGPPPGPPPPGGPPPPPPPGPPPGPPPPNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNONNNNNNNNNNNNNNNNNOOOONNNNNNNOOHOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOPPPPPPPPPPPPPGIPNNNNNNNNNNNNNNNOOOPPFGPNNNNNNNNNNONNNNONNNNNNNNONNNNNNNNNNNNNNFONNNONNONNNNNNNNNNNNONNSSSSSSSSSSSSSPGFSSSSSSSSSSSSSSSSSSSPFSSSSSSSSSSSSSGPPFPPPPSPPPFGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSPFFONONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNONNOONNNNNNNNNNNONNNNNNNNNNNNNNOOONNNNNNNNNOOONONOOOOONNNNONOOOONNNONNNNNNNNNNNONOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["APP_NAME","VERSION","cli","configure_detector","configure_radar_from_cli","error","execute_command","firmware","get_current_firmware_info","handle_firmware_command","i2c","main","monitor_measurements","output_response","radar","run","Breathing","","","Calibrate","Check","Cli","Combined","","Commands","Config","Connect","Csv","DetectorMode","Disconnect","Distance","","Firmware","FirmwareAction","FirmwareType","Human","Info","Json","Long","Measure","Medium","Monitor","OutputFormat","Presence","","","PresenceRange","Short","Status","Update","Verify","augment_args","augment_args_for_update","augment_subcommands","","augment_subcommands_for_update","","auto_reconnect","auto_update_firmware","auto_verify_firmware","borrow","","","","","","","borrow_mut","","","","","","","clone","","","","","","clone_into","","","","","","clone_to_uninit","","","","","","command","","command_for_update","control_script","firmware_path","fmt","","","","","","format","from","","","","","","","from_arg_matches","","","from_arg_matches_mut","","","get_i2c_device_path","group_id","has_subcommand","","i2c_address","i2c_bus","i2c_device","int_pin","into","","","","","","","mode","no_auto_reconnect","parse_i2c_address","quiet","timeout","to_owned","","","","","","to_possible_value","","","","try_from","","","","","","","try_into","","","","","","","type_id","","","","","","","update_from_arg_matches","","","update_from_arg_matches_mut","","","value_variants","","","","verbose","wakeup_pin","action","count","force","frame_rate","interval","length","presence_range","save_to","sensitivity","start","firmware_type","","force","verify","CalibrationRequired","Config","DeviceError","Err","I2c","InitializationFailed","InvalidParameters","InvalidResponse","Io","Json","MeasurementFailed","NotConnected","Ok","RadarError","Result","Timeout","borrow","borrow_mut","fmt","","from","","","","","into","source","to_string","try_from","try_into","type_id","message","response","timeout","Breathing","Distance","FirmwareManager","FirmwareType","Presence","application_id","binary_filename","borrow","","borrow_mut","","calculate_binary_checksum","clone","clone_into","clone_to_uninit","control_script","default","display_name","enter_bootloader_mode","eq","firmware_path","firmware_update_needed","flash_firmware","fmt","from","","","","get_firmware_checksum","i2c_address","into","","new","reset_to_run_mode","to_owned","try_from","","try_into","","type_id","","update_firmware","update_firmware_with_verification","verify_firmware","I2cDevice","address","borrow","borrow_mut","configure_gpio","device","export_gpio","from","int_pin","into","is_module_ready","new","read_gpio_value","read_register","set_gpio_direction","set_gpio_value","sleep_module","try_from","try_into","type_id","wake_up_module","wakeup_pin","write_read_register","write_register","BREATHING_DISTANCE_DETERMINATION_DURATION_S_DEFAULT","BREATHING_END_DEFAULT","BREATHING_FRAME_RATE_DEFAULT","BREATHING_HIGHEST_BREATHING_RATE_DEFAULT","BREATHING_HWAAS_DEFAULT","BREATHING_INTRA_DETECTION_THRESHOLD_DEFAULT","BREATHING_LOWEST_BREATHING_RATE_DEFAULT","BREATHING_NUM_DISTANCES_TO_ANALYZE_DEFAULT","BREATHING_PROFILE_DEFAULT","BREATHING_START_DEFAULT","BREATHING_SWEEPS_PER_FRAME_DEFAULT","BREATHING_TIME_SERIES_LENGTH_S_DEFAULT","BREATHING_USE_PRESENCE_PROCESSOR_DEFAULT","Breathing","BreathingAppState","BreathingMeasurement","CALIBRATION_TIMEOUT","CMD_APPLY_CONFIGURATION","CMD_APPLY_CONFIG_AND_CALIBRATE","CMD_BREATHING_APPLY_CONFIGURATION","CMD_BREATHING_START_APP","CMD_BREATHING_STOP_APP","CMD_CALIBRATE","CMD_DISABLE_CONTINUOUS_MODE","CMD_DISABLE_DETECTOR","CMD_ENABLE_CONTINUOUS_MODE","CMD_ENABLE_DETECTOR","CMD_ENABLE_PRESENCE_DETECTOR","CMD_MEASURE_DISTANCE","CMD_MEASURE_PRESENCE","CMD_PRESENCE_APPLY_CONFIGURATION","CMD_PRESENCE_START","CMD_PRESENCE_STOP","CMD_RECALIBRATE","CMD_RESET_MODULE","Combined","CombinedMeasurement","DISTANCE_CLOSE_RANGE_LEAKAGE_CANCELLATION_DEFAULT","DISTANCE_END_DEFAULT","DISTANCE_FIXED_AMPLITUDE_THRESHOLD_VALUE_DEFAULT","DISTANCE_FIXED_STRENGTH_THRESHOLD_VALUE_DEFAULT","DISTANCE_MAX_PROFILE_DEFAULT","DISTANCE_MAX_STEP_LENGTH_DEFAULT","DISTANCE_NUM_FRAMES_RECORDED_THRESHOLD_DEFAULT","DISTANCE_PEAK_SORTING_DEFAULT","DISTANCE_REFLECTOR_SHAPE_DEFAULT","DISTANCE_SIGNAL_QUALITY_DEFAULT","DISTANCE_START_DEFAULT","DISTANCE_THRESHOLD_METHOD_DEFAULT","DISTANCE_THRESHOLD_SENSITIVITY_DEFAULT","DetectorMode","DetermineDistance","Distance","DistanceMeasurement","EstimateBreathingRate","Init","IntraPresence","Long","MEASUREMENT_TIMEOUT","Medium","NoPresence","Presence","PresenceMeasurement","PresenceRange","REG_APPLICATION_ID","REG_BREATHING_APP_STATE","REG_BREATHING_DISTANCE_DETERMINATION_DURATION_S","REG_BREATHING_END","REG_BREATHING_FRAME_RATE","REG_BREATHING_HIGHEST_BREATHING_RATE","REG_BREATHING_HWAAS","REG_BREATHING_INTRA_DETECTION_THRESHOLD","REG_BREATHING_LOWEST_BREATHING_RATE","REG_BREATHING_NUM_DISTANCES_TO_ANALYZE","REG_BREATHING_PROFILE","REG_BREATHING_RATE","REG_BREATHING_RESULT","REG_BREATHING_START","REG_BREATHING_SWEEPS_PER_FRAME","REG_BREATHING_TIME_SERIES_LENGTH_S","REG_BREATHING_USE_PRESENCE_PROCESSOR","REG_CLOSE_RANGE_LEAKAGE_CANCELLATION","REG_COMMAND","REG_DETECTOR_STATUS","REG_DISTANCE_RESULT","REG_END_CONFIG","REG_FIXED_AMPLITUDE_THRESHOLD_VALUE","REG_FIXED_STRENGTH_THRESHOLD_VALUE","REG_FRAME_RATE","REG_INTER_DETECTION_THRESHOLD","REG_INTER_PRESENCE_SCORE","REG_INTRA_DETECTION_THRESHOLD","REG_INTRA_PRESENCE_SCORE","REG_MAX_PROFILE","REG_MAX_STEP_LENGTH","REG_MEASURE_COUNTER","REG_NUM_FRAMES_RECORDED_THRESHOLD","REG_PEAK0_DISTANCE","REG_PEAK0_STRENGTH","REG_PEAK_SORTING","REG_PRESENCE_DISTANCE","REG_PRESENCE_END","REG_PRESENCE_RESULT","REG_PRESENCE_START","REG_PROTOCOL_STATUS","REG_REFLECTOR_SHAPE","REG_SENSOR_INFO","REG_SIGNAL_QUALITY","REG_START_CONFIG","REG_THRESHOLD_METHOD","REG_THRESHOLD_SENSITIVITY","REG_VERSION","STATUS_ALL_ERROR_MASK","STATUS_ALL_OK_MASK","STATUS_BUSY","STATUS_CALIBRATION_DONE","STATUS_CONFIG_APPLY_ERROR","STATUS_CONFIG_APPLY_OK","STATUS_CONFIG_CREATE_ERROR","STATUS_CONFIG_CREATE_OK","STATUS_DETECTOR_CALIBRATE_ERROR","STATUS_DETECTOR_CREATE_ERROR","STATUS_DETECTOR_CREATE_OK","STATUS_DETECTOR_READY","STATUS_DISTANCE_BUSY","STATUS_DISTANCE_CALIBRATION_BUFFER_ERROR","STATUS_DISTANCE_CALIBRATION_BUFFER_OK","STATUS_DISTANCE_CONFIG_APPLY_ERROR","STATUS_DISTANCE_CONFIG_APPLY_OK","STATUS_DISTANCE_CONFIG_CREATE_ERROR","STATUS_DISTANCE_CONFIG_CREATE_OK","STATUS_DISTANCE_DETECTOR_BUFFER_ERROR","STATUS_DISTANCE_DETECTOR_BUFFER_OK","STATUS_DISTANCE_DETECTOR_CALIBRATE_ERROR","STATUS_DISTANCE_DETECTOR_CALIBRATE_OK","STATUS_DISTANCE_DETECTOR_CREATE_ERROR","STATUS_DISTANCE_DETECTOR_CREATE_OK","STATUS_DISTANCE_DETECTOR_ERROR","STATUS_DISTANCE_RSS_REGISTER_ERROR","STATUS_DISTANCE_RSS_REGISTER_OK","STATUS_DISTANCE_SENSOR_BUFFER_ERROR","STATUS_DISTANCE_SENSOR_BUFFER_OK","STATUS_DISTANCE_SENSOR_CALIBRATE_ERROR","STATUS_DISTANCE_SENSOR_CALIBRATE_OK","STATUS_DISTANCE_SENSOR_CREATE_ERROR","STATUS_DISTANCE_SENSOR_CREATE_OK","STATUS_ERROR","STATUS_MEASUREMENT_READY","STATUS_PRESENCE_BUSY","STATUS_PRESENCE_CONFIG_APPLY_ERROR","STATUS_PRESENCE_CONFIG_APPLY_OK","STATUS_PRESENCE_CONFIG_CREATE_ERROR","STATUS_PRESENCE_CONFIG_CREATE_OK","STATUS_PRESENCE_DETECTOR_BUFFER_ERROR","STATUS_PRESENCE_DETECTOR_BUFFER_OK","STATUS_PRESENCE_DETECTOR_CREATE_ERROR","STATUS_PRESENCE_DETECTOR_CREATE_OK","STATUS_PRESENCE_DETECTOR_ERROR","STATUS_PRESENCE_RSS_REGISTER_ERROR","STATUS_PRESENCE_RSS_REGISTER_OK","STATUS_PRESENCE_SENSOR_BUFFER_ERROR","STATUS_PRESENCE_SENSOR_BUFFER_OK","STATUS_PRESENCE_SENSOR_CALIBRATE_ERROR","STATUS_PRESENCE_SENSOR_CALIBRATE_OK","STATUS_PRESENCE_SENSOR_CREATE_ERROR","STATUS_PRESENCE_SENSOR_CREATE_OK","STATUS_RSS_REGISTER_OK","STATUS_SENSOR_CALIBRATE_ERROR","STATUS_SENSOR_CALIBRATE_OK","STATUS_SENSOR_CREATE_ERROR","STATUS_SENSOR_CREATE_OK","Short","XM125Config","XM125Radar","app_state","auto_connect","auto_reconnect","borrow","","","","","","","","","borrow_mut","","","","","","","","","breathing_rate","calibrate","clone","","","","","","","","clone_into","","","","","","","","clone_to_uninit","","","","","","","","config","configure_detector","configure_presence_range","connect","connect_async","continuous_mode","default","deserialize","","","","","","","detector_mode","disconnect","display_name","distance","","eq","","","fmt","","","","","","","","frame_rate","from","","","","","","","","","from_u32","get_detector_mode","get_info","get_status","get_status_raw","i2c","inter_detection_threshold","inter_presence_score","into","","","","","","","","","intra_detection_threshold","intra_presence_score","is_calibrated","is_connected","","is_continuous_monitoring","last_calibration","last_measurement","length_m","max_profile","max_step_length","measure_breathing","measure_combined","measure_distance","measure_presence","measurement_interval_ms","new","presence","presence_detected","presence_distance","presence_range","read_application_id","read_distance_result","reset_xm125_to_run_mode","result_ready","send_command","serialize","","","","","","","set_config","set_detector_mode","start_continuous_monitoring","start_m","stop_continuous_monitoring","strength","sweeps_per_frame","temperature","","threshold_sensitivity","timestamp","","","","to_owned","","","","","","","","try_from","","","","","","","","","try_into","","","","","","","","","type_id","","","","","","","","","validate_firmware_compatibility","wait_for_calibration","wait_for_measurement","write_breathing_configuration","write_distance_configuration"],"q":[[0,"xm125_radar_monitor"],[16,"xm125_radar_monitor::cli"],[180,"xm125_radar_monitor::cli::Commands"],[190,"xm125_radar_monitor::cli::FirmwareAction"],[194,"xm125_radar_monitor::error"],[225,"xm125_radar_monitor::error::RadarError"],[228,"xm125_radar_monitor::firmware"],[272,"xm125_radar_monitor::i2c"],[296,"xm125_radar_monitor::radar"],[661,"core::option"],[662,"core::result"],[663,"clap_builder::builder::command"],[664,"alloc::string"],[665,"core::fmt"],[666,"clap_builder::parser::matches::arg_matches"],[667,"clap_builder"],[668,"clap_builder::util::id"],[669,"clap_builder::builder::possible_value"],[670,"core::any"],[671,"serde_json::error"],[672,"config::error"],[673,"std::io::error"],[674,"linux_embedded_hal::i2c"],[675,"core::error"],[676,"alloc::vec"],[677,"core::time"],[678,"serde_core::de"],[679,"serde_core::ser"],[680,"chrono::datetime"]],"i":"````````````````AfBdBh2Aj`31`33Bf`4324``040l505`543`0522A`0636300006352410635241635241635241635241000006352410063524106306300630000063524100`006352415241063524106352410635241063063524100D`DbDdDf200200DhDj11Ab00Hb111111110``1111111111111111EfEhEjEl0``000En101011100101000101110001001010101000`F`0000000000000000000000`````````````G``````````````````````0```````````````Fl1`000Gb`012`````````````````````````````````````````````````````````````````````````````````````````````````````````````0``FjfFn153GdGfGh75348621075354862107538621075386210753444444386210753472086786210753348621075374444431486210753314444443334444340113444548621075444342325321058621075348621075348621075348621075344444","f":"{{}b}0`{{{b{df}}{j{h}}{j{h}}{j{l}}{j{h}}{j{h}}}n}{{{b{df}}{b{A`}}}{{Ad{nAb}}}}`{{Af{b{df}}{b{A`}}}{{Ad{nAb}}}}`{{{b{df}}}{{Ad{AhAb}}}}{{Aj{b{A`}}}{{Ad{nAb}}}}`{{}n}{{{b{df}}{b{A`}}Al{j{Ah}}}{{Ad{nAb}}}}{{{b{A`}}{b{An}}{b{An}}{b{An}}{b{An}}}{{Ad{nAb}}}}`{A`{{Ad{nAb}}}}```````````````````````````````````{B`B`}00000{A`Bb}00{b{{b{c}}}{}}000000{{{b{d}}}{{b{dc}}}{}}000000{{{b{Af}}}Af}{{{b{Aj}}}Aj}{{{b{Bd}}}Bd}{{{b{Bf}}}Bf}{{{b{Bh}}}Bh}{{{b{l}}}l}{{b{b{dc}}}n{}}00000{{bBj}n}00000{{}B`}{A`j}1{A`Bl}0{{{b{Af}}{b{dBn}}}C`}{{{b{Aj}}{b{dBn}}}C`}{{{b{Bd}}{b{dBn}}}C`}{{{b{Bf}}{b{dBn}}}C`}{{{b{Bh}}{b{dBn}}}C`}{{{b{l}}{b{dBn}}}C`}{A`Bf}{cc{}}000000{{{b{Cb}}}{{Ad{A`Cd}}}}{{{b{Cb}}}{{Ad{AfCd}}}}{{{b{Cb}}}{{Ad{AjCd}}}}{{{b{dCb}}}{{Ad{A`Cd}}}}{{{b{dCb}}}{{Ad{AfCd}}}}{{{b{dCb}}}{{Ad{AjCd}}}}{{{b{A`}}}Bl}{{}{{j{Cf}}}}{{{b{An}}}Bb}0{A`Ch}{A`Bj}{A`j}0{{}c{}}000000{A`Bh}{A`Bb}{{{b{An}}}{{Ad{ChBl}}}}1{A`Al}{bc{}}00000{{{b{Bd}}}{{j{Cj}}}}{{{b{Bf}}}{{j{Cj}}}}{{{b{Bh}}}{{j{Cj}}}}{{{b{l}}}{{j{Cj}}}}{c{{Ad{e}}}{}{}}000000{{}{{Ad{c}}}{}}000000{bCl}000000{{{b{dA`}}{b{Cb}}}{{Ad{nCd}}}}{{{b{dAf}}{b{Cb}}}{{Ad{nCd}}}}{{{b{dAj}}{b{Cb}}}{{Ad{nCd}}}}{{{b{dA`}}{b{dCb}}}{{Ad{nCd}}}}{{{b{dAf}}{b{dCb}}}{{Ad{nCd}}}}{{{b{dAj}}{b{dCb}}}{{Ad{nCd}}}}{{}{{b{{Cn{Bd}}}}}}{{}{{b{{Cn{Bf}}}}}}{{}{{b{{Cn{Bh}}}}}}{{}{{b{{Cn{l}}}}}}{A`Bb}{A`j}{D`Aj}{Dbj}{DdBb}{Dfj}{DbAl}11311{DhBd}{Djj}{DhBb}0````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{Ab}}{b{dBn}}}C`}0{cc{}}{DlAb}{DnAb}{E`Ab}{EbAb}{{}c{}}{{{b{Ab}}}{{j{{b{Ed}}}}}}{bBl}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{bCl}{EfBl}{EhBl}{EjAl}`````{ElAh}{El{{b{An}}}}{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{En}}El}{{Ad{BlAb}}}}{{{b{El}}}El}{{b{b{dc}}}n{}}{{bBj}n}{EnBl}{{}En}8{{{b{En}}}{{Ad{nAb}}}}{{{b{El}}{b{El}}}Bb}3{{{b{En}}AhEl}{{Ad{BbAb}}}}{{{b{En}}{b{An}}}{{Ad{nAb}}}}{{{b{El}}{b{dBn}}}C`}{cc{}}{BhEl}1{BdEl}{{{b{En}}}{{Ad{BlAb}}}}{EnCh}{{}c{}}0{{{b{An}}{b{An}}Ch}En};{bc{}}{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{bCl}0{{{b{En}}El}{{Ad{nAb}}}}{{{b{En}}ElBb}{{Ad{nAb}}}}1`{F`Ch}{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{dF`}}{j{Ah}}{j{Ah}}}{{Ad{nAb}}}}{F`Fb}{{{b{F`}}Ah}{{Ad{nAb}}}}{cc{}}{F`j}?{{{b{F`}}}{{Ad{BbAb}}}}{{{b{An}}Ch}{{Ad{F`Ab}}}}{{{b{F`}}Ah}{{Ad{BjAb}}}}{{{b{dF`}}ChFd}{{Ad{{Ff{Bj}}Ab}}}}{{{b{F`}}Ah{b{An}}}{{Ad{nAb}}}}{{{b{F`}}AhBj}{{Ad{nAb}}}}{{{b{F`}}}{{Ad{nAb}}}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{bCl}3:{{{b{dF`}}Ch{b{{Cn{Bj}}}}Fd}{{Ad{{Ff{Bj}}Ab}}}}{{{b{dF`}}Ch{b{{Cn{Bj}}}}}{{Ad{nAb}}}}{{}Ah}000000000000```{{}Fh}111111111111111111``1111111111111````````0`````{{}Ch}0000000000000000000000000000000000000000000000022222222222222222222222222222222222222222222222222222222222```{FjFl}{{{b{df}}}{{Ad{nAb}}}}{FnBb}{b{{b{c}}}{}}00000000{{{b{d}}}{{b{dc}}}{}}00000000{Fjh}4{{{b{G`}}}G`}{{{b{Gb}}}Gb}{{{b{Gd}}}Gd}{{{b{Gf}}}Gf}{{{b{Gh}}}Gh}{{{b{Fl}}}Fl}{{{b{Fj}}}Fj}{{{b{Fn}}}Fn}{{b{b{dc}}}n{}}0000000{{bBj}n}0000000{fFn}?{{{b{df}}}n}{{{b{df}}}{{Ad{nAb}}}}0{fBb}{{}Fn}{c{{Ad{G`}}}Gj}{c{{Ad{Gb}}}Gj}{c{{Ad{Gd}}}Gj}{c{{Ad{Gf}}}Gj}{c{{Ad{Gh}}}Gj}{c{{Ad{Fl}}}Gj}{c{{Ad{Fj}}}Gj}{FnG`};{{{b{Fl}}}{{b{An}}}}{Gdh}{Ghj}{{{b{G`}}{b{G`}}}Bb}{{{b{Gb}}{b{Gb}}}Bb}{{{b{Fl}}{b{Fl}}}Bb}{{{b{G`}}{b{dBn}}}C`}{{{b{Gb}}{b{dBn}}}C`}{{{b{Gd}}{b{dBn}}}C`}{{{b{Gf}}{b{dBn}}}C`}{{{b{Gh}}{b{dBn}}}C`}{{{b{Fl}}{b{dBn}}}C`}{{{b{Fj}}{b{dBn}}}C`}{{{b{Fn}}{b{dBn}}}C`}{Fnh}{cc{}}00000000{AhFl}{{{b{f}}}G`}{{{b{df}}}{{Ad{BlAb}}}}0{{{b{df}}}{{Ad{AhAb}}}}{fF`}6{Gfh}{{}c{}}0000000081{fBb}{{{b{f}}}Bb}10{fj}0;{FnBj}{FnCh}{{{b{df}}}{{Ad{FjAb}}}}{{{b{df}}}{{Ad{GhAb}}}}{{{b{df}}}{{Ad{GdAb}}}}{{{b{df}}}{{Ad{GfAb}}}}{FnAl}{F`f}{Ghj}{GfBb}>{FnGb}{{{b{df}}}{{Ad{AhAb}}}}7{{{b{f}}}{{Ad{nAb}}}}{FjBb}{{{b{df}}Ah}{{Ad{nAb}}}}{{{b{G`}}c}AdGl}{{{b{Gb}}c}AdGl}{{{b{Gd}}c}AdGl}{{{b{Gf}}c}AdGl}{{{b{Gh}}c}AdGl}{{{b{Fl}}c}AdGl}{{{b{Fj}}c}AdGl}{{{b{df}}Fn}n}{{{b{df}}G`}{{Ad{nAb}}}}{{{b{df}}}{{Ad{nAb}}}}{Fnh}1{Gdh}{FnCh}{GdGn}{FjGn}4{GdH`}{GfH`}{GhH`}{FjH`}{bc{}}0000000{c{{Ad{e}}}{}{}}00000000{{}{{Ad{c}}}{}}00000000{bCl}00000000=====","D":"AB`","p":[[1,"reference",null,null,1],[0,"mut"],[5,"XM125Radar",296],[1,"f32"],[6,"Option",661,null,1],[6,"PresenceRange",16],[1,"unit"],[5,"Cli",16],[6,"RadarError",194],[6,"Result",662,null,1],[6,"Commands",16],[1,"u32"],[6,"FirmwareAction",16],[1,"u64"],[1,"str"],[5,"Command",663],[1,"bool"],[6,"FirmwareType",16],[6,"OutputFormat",16],[6,"DetectorMode",16],[1,"u8"],[5,"String",664],[5,"Formatter",665],[8,"Result",665],[5,"ArgMatches",666],[8,"Error",667],[5,"Id",668],[1,"u16"],[5,"PossibleValue",669],[5,"TypeId",670],[1,"slice"],[15,"Firmware",180],[15,"Monitor",180],[15,"Connect",180],[15,"Config",180],[15,"Update",190],[15,"Verify",190],[5,"Error",671],[6,"ConfigError",672],[5,"Error",673],[5,"I2CError",674],[10,"Error",675],[15,"DeviceError",225],[15,"InvalidResponse",225],[15,"Timeout",225],[6,"FirmwareType",228],[5,"FirmwareManager",228],[5,"I2cDevice",272],[5,"I2cdev",674],[1,"usize"],[5,"Vec",676],[5,"Duration",677],[5,"BreathingMeasurement",296],[6,"BreathingAppState",296],[5,"XM125Config",296],[6,"DetectorMode",296],[6,"PresenceRange",296],[5,"DistanceMeasurement",296],[5,"PresenceMeasurement",296],[5,"CombinedMeasurement",296],[10,"Deserializer",678],[10,"Serializer",679],[1,"i16"],[5,"DateTime",680],[8,"Result",194]],"r":[],"b":[[212,"impl-Debug-for-RadarError"],[213,"impl-Display-for-RadarError"],[215,"impl-From%3CError%3E-for-RadarError"],[216,"impl-From%3CConfigError%3E-for-RadarError"],[217,"impl-From%3CError%3E-for-RadarError"],[218,"impl-From%3CI2CError%3E-for-RadarError"],[253,"impl-From%3CDetectorMode%3E-for-FirmwareType"],[255,"impl-From%3CFirmwareType%3E-for-FirmwareType"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAUCMgAAAAMABgACAAsABQAWAAAAGQAAAB0AAAAiAAEAKwAAAC8AAAA0AAUAPQAiAGIABQBwAAUAdwACAIoAKAC1AAAAwwACAMcABwDQAAYA2AADAN0ACQDpAAAA7AADAPEABAD4AAEA/AAAAP4AAAAAAQAAAgEAAAcBBgARAQMAFgEBABkBAAAcAQQAIgECACYBsQDZAS0ACQIAAAsCGQAuAgAAMAIFAD8CAgBDAgAARQIEAEwCAABOAgUAVQIAAFcCCQBjAgAAZQIrAA==","P":[[60,"T"],[74,""],[80,"T"],[86,""],[104,"T"],[111,""],[125,"U"],[132,""],[137,"T"],[143,""],[147,"U,T"],[154,"U"],[161,""],[210,"T"],[212,""],[214,"T"],[215,""],[219,"U"],[220,""],[222,"U,T"],[223,"U"],[224,""],[235,"T"],[239,""],[241,"T"],[242,""],[252,"T"],[253,""],[254,"T"],[255,""],[258,"U"],[260,""],[262,"T"],[263,"U,T"],[265,"U"],[267,""],[274,"T"],[276,""],[279,"T"],[280,""],[281,"U"],[282,""],[289,"U,T"],[290,"U"],[291,""],[473,"T"],[491,""],[501,"T"],[509,""],[524,"__D"],[531,""],[548,"T"],[557,""],[565,"U"],[574,""],[600,"__S"],[607,""],[621,"T"],[629,"U,T"],[638,"U"],[647,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[18220]}