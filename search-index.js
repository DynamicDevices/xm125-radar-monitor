var searchIndex = new Map(JSON.parse('[["xm125_radar_monitor",{"t":"SPGPSNNHHCNNNHHCNCHCNNHHCHHHHHCNHHHHHHHCHNNNNPPPPPPPFPPGPPPGPPPPPGGPGPPPPPPPPGPPPGPPPPPPPPNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNNONNNNNNNNNNNNNNNNNNOOOONNNNOOOONNNNNNNNOOHOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOFFONNNNNNNNNNOONNNNOONNOOONNNNNNNNNNPPPPPPPPPPPPPPPGIPNNNNNNNNNNNNNNNOOOOPPFGPNNNNNNNNNNNONNNNNONNNNNNNNNNONNNNNNNNNNNNNNNGGPPPPFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFONNNONNONNNNNNNNNNNNONNSSSSSSSSSSSSSPGFSSSSSSSSSSSSSSSSSSSPFSSSSSSSSSSSSSGPPFPPPPSPPPFGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSPFFONONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNONNOONNNNNNNNNNNONNNNNNNNNNNNNNOOONNNNNNNNNOOONONOOOOONNNNONOOOONNNONNNNNNNNNNNONOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["APP_NAME","BootloaderMode","DeviceMode","RunMode","VERSION","borrow","borrow_mut","check_control_script","check_device_presence","cli","clone","clone_into","clone_to_uninit","configure_detector","configure_radar_from_cli","device_manager","eq","error","execute_command","firmware","fmt","from","get_current_firmware_info","get_current_firmware_info_for_check","gpio","handle_bootloader_command","handle_firmware_checksum_command","handle_firmware_command","handle_firmware_erase_command","handle_gpio_command","i2c","into","is_likely_unprogrammed_module","main","monitor_measurements","output_response","print_banner","print_banner_with_detected_mode","print_unprogrammed_module_help","radar","run","to_owned","try_from","try_into","type_id","Bootloader","Breathing","","","Calibrate","Check","Checksum","Cli","Combined","","Commands","Config","Connect","Csv","DetectorMode","Disconnect","Distance","","Erase","Firmware","FirmwareAction","FirmwareType","Gpio","GpioAction","Human","Info","Init","Json","Long","Measure","Medium","Monitor","OutputFormat","Presence","","","PresenceRange","ResetBootloader","ResetRun","Short","Status","","Test","Update","Verify","augment_args","augment_args_for_update","augment_subcommands","","","augment_subcommands_for_update","","","auto_reconnect","auto_update_firmware","auto_verify_firmware","borrow","","","","","","","","borrow_mut","","","","","","","","clone","","","","","","","clone_into","","","","","","","clone_to_uninit","","","","","","","command","","command_for_update","control_script","firmware_path","fmt","","","","","","","format","from","","","","","","","","from_arg_matches","","","","from_arg_matches_mut","","","","get_gpio_pins","get_i2c_device_path","gpio_boot","gpio_mcu_int","gpio_reset","gpio_wake","group_id","has_subcommand","","","i2c_address","i2c_bus","i2c_device","int_pin","into","","","","","","","","mode","no_auto_reconnect","parse_i2c_address","quiet","timeout","to_owned","","","","","","","to_possible_value","","","","try_from","","","","","","","","try_into","","","","","","","","type_id","","","","","","","","update_from_arg_matches","","","","update_from_arg_matches_mut","","","","value_variants","","","","verbose","wakeup_pin","action","","count","force","frame_rate","interval","length","presence_range","reset","save_to","sensitivity","start","confirm","firmware_type","","","force","verbose","verify","DeviceManager","DeviceState","app_id","borrow","","borrow_mut","","check_device_presence","check_i2c_bus_presence","clone","clone_into","clone_to_uninit","extract_i2c_bus_number","firmware_manager","firmware_type","fmt","from","","get_device_info","i2c_address","i2c_device_path","into","","is_present","is_responsive","needs_reset","new","reset_to_run_mode","to_owned","try_from","","try_into","","type_id","","update_firmware","CalibrationRequired","Config","DeviceError","Err","FirmwareError","I2c","InitializationFailed","InvalidParameters","InvalidResponse","Io","Json","MeasurementFailed","ModuleNotProgrammed","NotConnected","Ok","RadarError","Result","Timeout","borrow","borrow_mut","fmt","","from","","","","","into","source","to_string","try_from","try_into","type_id","message","","response","timeout","Breathing","Distance","FirmwareManager","FirmwareType","Presence","application_id","binary_filename","borrow","","borrow_mut","","calculate_binary_checksum","check_control_script","clone","clone_into","clone_to_uninit","control_script","default","display_name","enter_bootloader_mode","eq","erase_chip","firmware_path","firmware_update_needed","flash_firmware","fmt","from","","","","from_app_id","get_firmware_checksum","get_firmware_path","i2c_address","into","","new","reset_to_run_mode","to_owned","try_from","","try_into","","type_id","","update_firmware","update_firmware_with_verification","verify_device_in_run_mode","verify_firmware","GpioDirection","GpioValue","High","Input","Low","Output","XM125GpioController","XM125GpioPins","boot","borrow","","","","borrow_mut","","","","clone","","","clone_into","","","clone_to_uninit","","","default","","drop","eq","","export_gpio","fix_gpio141_bootloader_pin","fmt","","","","","from","","","","get_gpio_value","initialize","initialized","into","","","","is_initialized","mcu_interrupt","new","perform_reset_sequence","pins","","reset","reset_to_bootloader_mode","reset_to_run_mode","set_bootloader_mode","set_gpio_direction","set_gpio_value","set_run_mode","show_gpio_status","test_bootloader_control","to_owned","","","to_string","","try_export_gpio","try_from","","","","try_into","","","","type_id","","","","unbind_spi_controller","unbind_spi_device","wait_for_module_ready","wake_up","with_pins","I2cDevice","address","borrow","borrow_mut","configure_gpio","device","export_gpio","from","int_pin","into","is_module_ready","new","read_gpio_value","read_register","set_gpio_direction","set_gpio_value","sleep_module","try_from","try_into","type_id","wake_up_module","wakeup_pin","write_read_register","write_register","BREATHING_DISTANCE_DETERMINATION_DURATION_S_DEFAULT","BREATHING_END_DEFAULT","BREATHING_FRAME_RATE_DEFAULT","BREATHING_HIGHEST_BREATHING_RATE_DEFAULT","BREATHING_HWAAS_DEFAULT","BREATHING_INTRA_DETECTION_THRESHOLD_DEFAULT","BREATHING_LOWEST_BREATHING_RATE_DEFAULT","BREATHING_NUM_DISTANCES_TO_ANALYZE_DEFAULT","BREATHING_PROFILE_DEFAULT","BREATHING_START_DEFAULT","BREATHING_SWEEPS_PER_FRAME_DEFAULT","BREATHING_TIME_SERIES_LENGTH_S_DEFAULT","BREATHING_USE_PRESENCE_PROCESSOR_DEFAULT","Breathing","BreathingAppState","BreathingMeasurement","CALIBRATION_TIMEOUT","CMD_APPLY_CONFIGURATION","CMD_APPLY_CONFIG_AND_CALIBRATE","CMD_BREATHING_APPLY_CONFIGURATION","CMD_BREATHING_START_APP","CMD_BREATHING_STOP_APP","CMD_CALIBRATE","CMD_DISABLE_CONTINUOUS_MODE","CMD_DISABLE_DETECTOR","CMD_ENABLE_CONTINUOUS_MODE","CMD_ENABLE_DETECTOR","CMD_ENABLE_PRESENCE_DETECTOR","CMD_MEASURE_DISTANCE","CMD_MEASURE_PRESENCE","CMD_PRESENCE_APPLY_CONFIGURATION","CMD_PRESENCE_START","CMD_PRESENCE_STOP","CMD_RECALIBRATE","CMD_RESET_MODULE","Combined","CombinedMeasurement","DISTANCE_CLOSE_RANGE_LEAKAGE_CANCELLATION_DEFAULT","DISTANCE_END_DEFAULT","DISTANCE_FIXED_AMPLITUDE_THRESHOLD_VALUE_DEFAULT","DISTANCE_FIXED_STRENGTH_THRESHOLD_VALUE_DEFAULT","DISTANCE_MAX_PROFILE_DEFAULT","DISTANCE_MAX_STEP_LENGTH_DEFAULT","DISTANCE_NUM_FRAMES_RECORDED_THRESHOLD_DEFAULT","DISTANCE_PEAK_SORTING_DEFAULT","DISTANCE_REFLECTOR_SHAPE_DEFAULT","DISTANCE_SIGNAL_QUALITY_DEFAULT","DISTANCE_START_DEFAULT","DISTANCE_THRESHOLD_METHOD_DEFAULT","DISTANCE_THRESHOLD_SENSITIVITY_DEFAULT","DetectorMode","DetermineDistance","Distance","DistanceMeasurement","EstimateBreathingRate","Init","IntraPresence","Long","MEASUREMENT_TIMEOUT","Medium","NoPresence","Presence","PresenceMeasurement","PresenceRange","REG_APPLICATION_ID","REG_BREATHING_APP_STATE","REG_BREATHING_DISTANCE_DETERMINATION_DURATION_S","REG_BREATHING_END","REG_BREATHING_FRAME_RATE","REG_BREATHING_HIGHEST_BREATHING_RATE","REG_BREATHING_HWAAS","REG_BREATHING_INTRA_DETECTION_THRESHOLD","REG_BREATHING_LOWEST_BREATHING_RATE","REG_BREATHING_NUM_DISTANCES_TO_ANALYZE","REG_BREATHING_PROFILE","REG_BREATHING_RATE","REG_BREATHING_RESULT","REG_BREATHING_START","REG_BREATHING_SWEEPS_PER_FRAME","REG_BREATHING_TIME_SERIES_LENGTH_S","REG_BREATHING_USE_PRESENCE_PROCESSOR","REG_CLOSE_RANGE_LEAKAGE_CANCELLATION","REG_COMMAND","REG_DETECTOR_STATUS","REG_DISTANCE_RESULT","REG_END_CONFIG","REG_FIXED_AMPLITUDE_THRESHOLD_VALUE","REG_FIXED_STRENGTH_THRESHOLD_VALUE","REG_FRAME_RATE","REG_INTER_DETECTION_THRESHOLD","REG_INTER_PRESENCE_SCORE","REG_INTRA_DETECTION_THRESHOLD","REG_INTRA_PRESENCE_SCORE","REG_MAX_PROFILE","REG_MAX_STEP_LENGTH","REG_MEASURE_COUNTER","REG_NUM_FRAMES_RECORDED_THRESHOLD","REG_PEAK0_DISTANCE","REG_PEAK0_STRENGTH","REG_PEAK_SORTING","REG_PRESENCE_DISTANCE","REG_PRESENCE_END","REG_PRESENCE_RESULT","REG_PRESENCE_START","REG_PROTOCOL_STATUS","REG_REFLECTOR_SHAPE","REG_SENSOR_INFO","REG_SIGNAL_QUALITY","REG_START_CONFIG","REG_THRESHOLD_METHOD","REG_THRESHOLD_SENSITIVITY","REG_VERSION","STATUS_ALL_ERROR_MASK","STATUS_ALL_OK_MASK","STATUS_BUSY","STATUS_CALIBRATION_DONE","STATUS_CONFIG_APPLY_ERROR","STATUS_CONFIG_APPLY_OK","STATUS_CONFIG_CREATE_ERROR","STATUS_CONFIG_CREATE_OK","STATUS_DETECTOR_CALIBRATE_ERROR","STATUS_DETECTOR_CREATE_ERROR","STATUS_DETECTOR_CREATE_OK","STATUS_DETECTOR_READY","STATUS_DISTANCE_BUSY","STATUS_DISTANCE_CALIBRATION_BUFFER_ERROR","STATUS_DISTANCE_CALIBRATION_BUFFER_OK","STATUS_DISTANCE_CONFIG_APPLY_ERROR","STATUS_DISTANCE_CONFIG_APPLY_OK","STATUS_DISTANCE_CONFIG_CREATE_ERROR","STATUS_DISTANCE_CONFIG_CREATE_OK","STATUS_DISTANCE_DETECTOR_BUFFER_ERROR","STATUS_DISTANCE_DETECTOR_BUFFER_OK","STATUS_DISTANCE_DETECTOR_CALIBRATE_ERROR","STATUS_DISTANCE_DETECTOR_CALIBRATE_OK","STATUS_DISTANCE_DETECTOR_CREATE_ERROR","STATUS_DISTANCE_DETECTOR_CREATE_OK","STATUS_DISTANCE_DETECTOR_ERROR","STATUS_DISTANCE_RSS_REGISTER_ERROR","STATUS_DISTANCE_RSS_REGISTER_OK","STATUS_DISTANCE_SENSOR_BUFFER_ERROR","STATUS_DISTANCE_SENSOR_BUFFER_OK","STATUS_DISTANCE_SENSOR_CALIBRATE_ERROR","STATUS_DISTANCE_SENSOR_CALIBRATE_OK","STATUS_DISTANCE_SENSOR_CREATE_ERROR","STATUS_DISTANCE_SENSOR_CREATE_OK","STATUS_ERROR","STATUS_MEASUREMENT_READY","STATUS_PRESENCE_BUSY","STATUS_PRESENCE_CONFIG_APPLY_ERROR","STATUS_PRESENCE_CONFIG_APPLY_OK","STATUS_PRESENCE_CONFIG_CREATE_ERROR","STATUS_PRESENCE_CONFIG_CREATE_OK","STATUS_PRESENCE_DETECTOR_BUFFER_ERROR","STATUS_PRESENCE_DETECTOR_BUFFER_OK","STATUS_PRESENCE_DETECTOR_CREATE_ERROR","STATUS_PRESENCE_DETECTOR_CREATE_OK","STATUS_PRESENCE_DETECTOR_ERROR","STATUS_PRESENCE_RSS_REGISTER_ERROR","STATUS_PRESENCE_RSS_REGISTER_OK","STATUS_PRESENCE_SENSOR_BUFFER_ERROR","STATUS_PRESENCE_SENSOR_BUFFER_OK","STATUS_PRESENCE_SENSOR_CALIBRATE_ERROR","STATUS_PRESENCE_SENSOR_CALIBRATE_OK","STATUS_PRESENCE_SENSOR_CREATE_ERROR","STATUS_PRESENCE_SENSOR_CREATE_OK","STATUS_RSS_REGISTER_OK","STATUS_SENSOR_CALIBRATE_ERROR","STATUS_SENSOR_CALIBRATE_OK","STATUS_SENSOR_CREATE_ERROR","STATUS_SENSOR_CREATE_OK","Short","XM125Config","XM125Radar","app_state","auto_connect","auto_reconnect","borrow","","","","","","","","","borrow_mut","","","","","","","","","breathing_rate","calibrate","clone","","","","","","","","clone_into","","","","","","","","clone_to_uninit","","","","","","","","config","configure_detector","configure_presence_range","connect","connect_async","continuous_mode","default","deserialize","","","","","","","detector_mode","disconnect","display_name","distance","","eq","","","fmt","","","","","","","","frame_rate","from","","","","","","","","","from_u32","get_detector_mode","get_info","get_status","get_status_raw","i2c","inter_detection_threshold","inter_presence_score","into","","","","","","","","","intra_detection_threshold","intra_presence_score","is_calibrated","is_connected","","is_continuous_monitoring","last_calibration","last_measurement","length_m","max_profile","max_step_length","measure_breathing","measure_combined","measure_distance","measure_presence","measurement_interval_ms","new","presence","presence_detected","presence_distance","presence_range","read_application_id","read_distance_result","reset_xm125_to_run_mode","result_ready","send_command","serialize","","","","","","","set_config","set_detector_mode","start_continuous_monitoring","start_m","stop_continuous_monitoring","strength","sweeps_per_frame","temperature","","threshold_sensitivity","timestamp","","","","to_owned","","","","","","","","try_from","","","","","","","","","try_into","","","","","","","","","type_id","","","","","","","","","validate_firmware_compatibility","wait_for_calibration","wait_for_measurement","write_breathing_configuration","write_distance_configuration"],"q":[[0,"xm125_radar_monitor"],[45,"xm125_radar_monitor::cli"],[243,"xm125_radar_monitor::cli::Commands"],[255,"xm125_radar_monitor::cli::FirmwareAction"],[262,"xm125_radar_monitor::device_manager"],[298,"xm125_radar_monitor::error"],[331,"xm125_radar_monitor::error::RadarError"],[335,"xm125_radar_monitor::firmware"],[384,"xm125_radar_monitor::gpio"],[471,"xm125_radar_monitor::i2c"],[495,"xm125_radar_monitor::radar"],[860,"core::result"],[861,"core::option"],[862,"core::fmt"],[863,"core::any"],[864,"clap_builder::builder::command"],[865,"alloc::string"],[866,"clap_builder::parser::matches::arg_matches"],[867,"clap_builder"],[868,"clap_builder::util::id"],[869,"clap_builder::builder::possible_value"],[870,"linux_embedded_hal::i2c"],[871,"std::io::error"],[872,"config::error"],[873,"serde_json::error"],[874,"core::error"],[875,"alloc::vec"],[876,"core::time"],[877,"serde_core::de"],[878,"serde_core::ser"],[879,"chrono::datetime"]],"i":"`A``0`00```000```0```00`````````0`````````0000An0BjCh2Bl0`31`33Cf`43214``4`04Bn1Aj606`654`11061133n0742742000074263510742635174263517426351742635100000742635100742635107420742000000074200000742635100`007426351635107426351074263510742635107420742635100DjDlDnE`Eb200Ed311EfEhEjEl202``EnF`10100111001101000011110010101010j00In11111111110``1111111111111111FnG`GbGdBf0``000Fb10100111001010000101111000010010101010000``GhGf10``D`Gj12301231231231230102300122330123000012301000010000000012323001230123012300010`Gl0000000000000000000000`````````````Hl`````````````````````0```````````````Hh1`000Hn`012`````````````````````````````````````````````````````````````````````````````````````````````````````````````0``HfAdHj153I`IbId75348621075354862107538621075386210753444444386210753472086786210753348621075374444431486210753314444443334444340113444548621075444342325321058621075348621075348621075348621075344444","f":"{{}b}```0{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}{{l{hj}}}}{{{b{n}}}{{l{A`j}}}}`{{{b{A`}}}A`}{{b{b{dc}}}h{}}{{bAb}h}{{{b{dAd}}{Ah{Af}}{Ah{Af}}{Ah{Aj}}{Ah{Af}}{Ah{Af}}}h}{{{b{dAd}}{b{n}}}{{l{hj}}}}`{{{b{A`}}{b{A`}}}Al}`{{An{b{dAd}}{b{n}}}{{l{hj}}}}`{{{b{A`}}{b{dB`}}}Bb}{cc{}}{{{b{dAd}}}{{l{Bdj}}}}{{{b{n}}}{{l{{Bh{BdBf}}j}}}}`{{Al{b{n}}}{{l{hj}}}}{{{Ah{Bj}}Al{b{n}}}{{l{hj}}}}{{Bl{b{n}}}{{l{hj}}}}2{{{b{Bn}}{b{n}}}{{l{hj}}}}`{{}c{}}{{{b{n}}}Al}{{}h}{{{b{dAd}}{b{n}}C`{Ah{Bd}}}{{l{hj}}}}{{{b{n}}{b{f}}{b{f}}{b{f}}{b{f}}}{{l{hj}}}}{{{b{n}}}h}{{{b{n}}{Ah{{b{f}}}}}h}1`{n{{l{hj}}}}{bc{}}{c{{l{e}}}{}{}}{{}{{l{c}}}{}}{bCb}`````````````````````````````````````````````{CdCd}0000000{nAl}00{b{{b{c}}}{}}0000000{{{b{d}}}{{b{dc}}}{}}0000000{{{b{An}}}An}{{{b{Bl}}}Bl}{{{b{Bn}}}Bn}{{{b{Bj}}}Bj}{{{b{Cf}}}Cf}{{{b{Ch}}}Ch}{{{b{Aj}}}Aj}{{b{b{dc}}}h{}}000000{{bAb}h}000000{{}Cd}{nAh}1{nCj}0{{{b{An}}{b{dB`}}}Bb}{{{b{Bl}}{b{dB`}}}Bb}{{{b{Bn}}{b{dB`}}}Bb}{{{b{Bj}}{b{dB`}}}Bb}{{{b{Cf}}{b{dB`}}}Bb}{{{b{Ch}}{b{dB`}}}Bb}{{{b{Aj}}{b{dB`}}}Bb}{nCf}{cc{}}0000000{{{b{Cl}}}{{l{nCn}}}}{{{b{Cl}}}{{l{AnCn}}}}{{{b{Cl}}}{{l{BlCn}}}}{{{b{Cl}}}{{l{BnCn}}}}{{{b{dCl}}}{{l{nCn}}}}{{{b{dCl}}}{{l{AnCn}}}}{{{b{dCl}}}{{l{BlCn}}}}{{{b{dCl}}}{{l{BnCn}}}}{{{b{n}}}D`}{{{b{n}}}Cj}{nBd}000{{}{{Ah{Db}}}}{{{b{f}}}Al}00{nDd}{nAb}{nAh}0{{}c{}}0000000{nCh}{nAl}{{{b{f}}}{{l{DdCj}}}}1{nC`}{bc{}}000000{{{b{Bj}}}{{Ah{Df}}}}{{{b{Cf}}}{{Ah{Df}}}}{{{b{Ch}}}{{Ah{Df}}}}{{{b{Aj}}}{{Ah{Df}}}}{c{{l{e}}}{}{}}0000000{{}{{l{c}}}{}}0000000{bCb}0000000{{{b{dn}}{b{Cl}}}{{l{hCn}}}}{{{b{dAn}}{b{Cl}}}{{l{hCn}}}}{{{b{dBl}}{b{Cl}}}{{l{hCn}}}}{{{b{dBn}}{b{Cl}}}{{l{hCn}}}}{{{b{dn}}{b{dCl}}}{{l{hCn}}}}{{{b{dAn}}{b{dCl}}}{{l{hCn}}}}{{{b{dBl}}{b{dCl}}}{{l{hCn}}}}{{{b{dBn}}{b{dCl}}}{{l{hCn}}}}{{}{{b{{Dh{Bj}}}}}}{{}{{b{{Dh{Cf}}}}}}{{}{{b{{Dh{Ch}}}}}}{{}{{b{{Dh{Aj}}}}}}{nAl}{nAh}{DjBl}{DlBn}{DnAh}{E`Al}{EbAh}{DnC`}11{EdAl}422{EfAl}{EhBj}{EjAh}{ElAh}{EhAl}{ElAl}1``{EnAh}{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{F`}}}En}{{{b{F`}}Ab}Al}{{{b{En}}}En}{{b{b{dc}}}h{}}{{bAb}h}{{{b{F`}}}Ab}{F`Fb}9{{{b{En}}{b{dB`}}}Bb}{cc{}}0{{{b{F`}}}{{l{Cjj}}}}{F`Dd}{F`Cj}{{}c{}}0{EnAl}00{{CjDdCjCj}F`}{{{b{F`}}}{{l{hj}}}}{bc{}}{c{{l{e}}}{}{}}0{{}{{l{c}}}{}}0{bCb}0{{{b{F`}}BfAl}{{l{hj}}}}``````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{j}}{b{dB`}}}Bb}0{Fdj}{cc{}}{Ffj}{Fhj}{Fjj}{{}c{}}{{{b{j}}}{{Ah{{b{Fl}}}}}}{bCj}>=<{FnCj}{G`Cj}{GbCj}{GdC`}`````{BfBd}{Bf{{b{f}}}}{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{Fb}}Bf}{{l{Cjj}}}}{{{b{Fb}}}{{l{hj}}}}{{{b{Bf}}}Bf}{{b{b{dc}}}h{}}{{bAb}h}{FbCj}{{}Fb}95{{{b{Bf}}{b{Bf}}}Al}62{{{b{Fb}}BdBf}{{l{Alj}}}}{{{b{Fb}}{b{f}}}{{l{hj}}}}{{{b{Bf}}{b{dB`}}}Bb}{cc{}}0{ChBf}{BjBf}{BdBf}>{{{b{Fb}}Bf}Cj}{FbDd}{{}c{}}0{{{b{f}}{b{f}}Dd}Fb}{{{b{Fb}}}{{l{hj}}}}{bc{}}{c{{l{e}}}{}{}}0{{}{{l{c}}}{}}0{bCb}0{{{b{Fb}}Bf}{{l{hj}}}}{{{b{Fb}}BfAl}{{l{hj}}}}{{{b{Fb}}}Al}2````````{D`Bd}{b{{b{c}}}{}}000{{{b{d}}}{{b{dc}}}{}}000{{{b{D`}}}D`}{{{b{Gf}}}Gf}{{{b{Gh}}}Gh}{{b{b{dc}}}h{}}00{{bAb}h}00{{}Gj}{{}D`}{{{b{dGj}}}h}{{{b{Gf}}{b{Gf}}}Al}{{{b{Gh}}{b{Gh}}}Al}{{{b{Gj}}Bd{b{f}}}{{l{hj}}}}{{{b{Gj}}}{{l{hj}}}}{{{b{D`}}{b{dB`}}}Bb}{{{b{Gf}}{b{dB`}}}Bb}0{{{b{Gh}}{b{dB`}}}Bb}0{cc{}}000{{{b{Gj}}Bd}{{l{Ghj}}}}{{{b{dGj}}}{{l{hj}}}}{GjAl}{{}c{}}000{{{b{Gj}}}Al}{D`Bd}{{}Gj};{{{b{Gj}}}{{b{D`}}}}{GjD`}3==={{{b{Gj}}BdGf{b{f}}}{{l{hj}}}}{{{b{Gj}}BdGh{b{f}}}{{l{hj}}}}???{bc{}}00{bCj}0{{{b{Gj}}Bd}{{l{hFf}}}}{c{{l{e}}}{}{}}000{{}{{l{c}}}{}}000{bCb}000{{{b{Gj}}{b{f}}}{{l{hj}}}}0{{{b{Gj}}Bd}{{l{hj}}}}={D`Gj}`{GlDd}{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{dGl}}{Ah{Bd}}{Ah{Bd}}}{{l{hj}}}}{GlGn}{{{b{Gl}}Bd}{{l{hj}}}}{cc{}}{GlAh}{{}c{}}{{{b{Gl}}}{{l{Alj}}}}{{{b{f}}Dd}{{l{Glj}}}}{{{b{Gl}}Bd}{{l{Abj}}}}{{{b{dGl}}DdH`}{{l{{Hb{Ab}}j}}}}{{{b{Gl}}Bd{b{f}}}{{l{hj}}}}{{{b{Gl}}BdAb}{{l{hj}}}}{{{b{Gl}}}{{l{hj}}}}{c{{l{e}}}{}{}}{{}{{l{c}}}{}}{bCb}3;{{{b{dGl}}Dd{b{{Dh{Ab}}}}H`}{{l{{Hb{Ab}}j}}}}{{{b{dGl}}Dd{b{{Dh{Ab}}}}}{{l{hj}}}}{{}Bd}000000000000```{{}Hd}111111111111111111``1111111111111````````0`````{{}Dd}0000000000000000000000000000000000000000000000022222222222222222222222222222222222222222222222222222222222```{HfHh}{{{b{dAd}}}{{l{hj}}}}{HjAl}{b{{b{c}}}{}}00000000{{{b{d}}}{{b{dc}}}{}}00000000{HfAf}4{{{b{Hl}}}Hl}{{{b{Hn}}}Hn}{{{b{I`}}}I`}{{{b{Ib}}}Ib}{{{b{Id}}}Id}{{{b{Hh}}}Hh}{{{b{Hf}}}Hf}{{{b{Hj}}}Hj}{{b{b{dc}}}h{}}0000000{{bAb}h}0000000{AdHj}?{{{b{dAd}}}h}{{{b{dAd}}}{{l{hj}}}}0{AdAl}{{}Hj}{c{{l{Hl}}}If}{c{{l{Hn}}}If}{c{{l{I`}}}If}{c{{l{Ib}}}If}{c{{l{Id}}}If}{c{{l{Hh}}}If}{c{{l{Hf}}}If}{HjHl};{{{b{Hh}}}{{b{f}}}}{I`Af}{IdAh}{{{b{Hl}}{b{Hl}}}Al}{{{b{Hn}}{b{Hn}}}Al}{{{b{Hh}}{b{Hh}}}Al}{{{b{Hl}}{b{dB`}}}Bb}{{{b{Hn}}{b{dB`}}}Bb}{{{b{I`}}{b{dB`}}}Bb}{{{b{Ib}}{b{dB`}}}Bb}{{{b{Id}}{b{dB`}}}Bb}{{{b{Hh}}{b{dB`}}}Bb}{{{b{Hf}}{b{dB`}}}Bb}{{{b{Hj}}{b{dB`}}}Bb}{HjAf}{cc{}}00000000{BdHh}{{{b{Ad}}}Hl}{{{b{dAd}}}{{l{Cjj}}}}0{{{b{dAd}}}{{l{Bdj}}}}{AdGl}6{IbAf}{{}c{}}0000000081{AdAl}{{{b{Ad}}}Al}10{AdAh}0;{HjAb}{HjDd}{{{b{dAd}}}{{l{Hfj}}}}{{{b{dAd}}}{{l{Idj}}}}{{{b{dAd}}}{{l{I`j}}}}{{{b{dAd}}}{{l{Ibj}}}}{HjC`}{GlAd}{IdAh}{IbAl}>{HjHn}{{{b{dAd}}}{{l{Bdj}}}}7{{{b{Ad}}}{{l{hj}}}}{HfAl}{{{b{dAd}}Bd}{{l{hj}}}}{{{b{Hl}}c}lIh}{{{b{Hn}}c}lIh}{{{b{I`}}c}lIh}{{{b{Ib}}c}lIh}{{{b{Id}}c}lIh}{{{b{Hh}}c}lIh}{{{b{Hf}}c}lIh}{{{b{dAd}}Hj}h}{{{b{dAd}}Hl}{{l{hj}}}}{{{b{dAd}}}{{l{hj}}}}{HjAf}1{I`Af}{HjDd}{I`Ij}{HfIj}4{I`Il}{IbIl}{IdIl}{HfIl}{bc{}}0000000{c{{l{e}}}{}{}}00000000{{}{{l{c}}}{}}00000000{bCb}00000000=====","D":"ALj","p":[[1,"reference",null,null,1],[0,"mut"],[1,"str"],[1,"unit"],[6,"RadarError",298],[6,"Result",860,null,1],[5,"Cli",45],[6,"DeviceMode",0],[1,"u8"],[5,"XM125Radar",495],[1,"f32"],[6,"Option",861,null,1],[6,"PresenceRange",45],[1,"bool"],[6,"Commands",45],[5,"Formatter",862],[8,"Result",862],[1,"u32"],[6,"FirmwareType",335],[1,"tuple",null,null,1],[6,"FirmwareType",45],[6,"FirmwareAction",45],[6,"GpioAction",45],[1,"u64"],[5,"TypeId",863],[5,"Command",864],[6,"OutputFormat",45],[6,"DetectorMode",45],[5,"String",865],[5,"ArgMatches",866],[8,"Error",867],[5,"XM125GpioPins",384],[5,"Id",868],[1,"u16"],[5,"PossibleValue",869],[1,"slice"],[15,"Firmware",243],[15,"Gpio",243],[15,"Monitor",243],[15,"Connect",243],[15,"Config",243],[15,"Bootloader",243],[15,"Erase",255],[15,"Update",255],[15,"Verify",255],[15,"Checksum",255],[5,"DeviceState",262],[5,"DeviceManager",262],[5,"FirmwareManager",335],[5,"I2CError",870],[5,"Error",871],[6,"ConfigError",872],[5,"Error",873],[10,"Error",874],[15,"DeviceError",331],[15,"FirmwareError",331],[15,"InvalidResponse",331],[15,"Timeout",331],[6,"GpioDirection",384],[6,"GpioValue",384],[5,"XM125GpioController",384],[5,"I2cDevice",471],[5,"I2cdev",870],[1,"usize"],[5,"Vec",875],[5,"Duration",876],[5,"BreathingMeasurement",495],[6,"BreathingAppState",495],[5,"XM125Config",495],[6,"DetectorMode",495],[6,"PresenceRange",495],[5,"DistanceMeasurement",495],[5,"PresenceMeasurement",495],[5,"CombinedMeasurement",495],[10,"Deserializer",877],[10,"Serializer",878],[1,"i16"],[5,"DateTime",879],[8,"Result",298]],"r":[],"b":[[318,"impl-Debug-for-RadarError"],[319,"impl-Display-for-RadarError"],[320,"impl-From%3CI2CError%3E-for-RadarError"],[322,"impl-From%3CError%3E-for-RadarError"],[323,"impl-From%3CConfigError%3E-for-RadarError"],[324,"impl-From%3CError%3E-for-RadarError"],[363,"impl-From%3CDetectorMode%3E-for-FirmwareType"],[364,"impl-From%3CFirmwareType%3E-for-FirmwareType"],[418,"impl-Debug-for-GpioDirection"],[419,"impl-Display-for-GpioDirection"],[420,"impl-Display-for-GpioValue"],[421,"impl-Debug-for-GpioValue"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAHcCRAAAAAcACgADABAABQAZAAAAHwAAACIABAAoAAUANQAAADgAAAA8AAAAQgABAEUAAABOAAAAUgAAAFsABwBmACcAkAAGAKAABwCuAAMAwwAuAPQAAQAJAQQAEAECABQBAgAaAQEAHgEDACMBBgArAQIALwEJADoBBwBDAQIARwEKAFQBAABXAQMAXQEEAGQBAABmAQAAaQEAAGwBAQBxAQAAdgEGAIMBAwCKARUAogEEAK0BAAC3AQAAwQEEAMcBCwDYAQMA3QEBAOABAADjAQQA6QECAO0BsQCgAi0A0AIAANICGQD1AgAA9wIFAAYDAgAKAwAADAMEABMDAAAVAwUAHAMAAB4DCQAqAwAALAMrAA==","P":[[5,"T"],[7,""],[11,"T"],[12,""],[21,"T"],[22,""],[31,"U"],[32,""],[41,"T"],[42,"U,T"],[43,"U"],[44,""],[101,"T"],[117,""],[124,"T"],[131,""],[151,"T"],[159,""],[181,"U"],[189,""],[194,"T"],[201,""],[205,"U,T"],[213,"U"],[221,""],[265,"T"],[269,""],[272,"T"],[273,""],[278,"T"],[280,""],[283,"U"],[285,""],[290,"T"],[291,"U,T"],[293,"U"],[295,""],[316,"T"],[318,""],[321,"T"],[322,""],[325,"U"],[326,""],[328,"U,T"],[329,"U"],[330,""],[342,"T"],[346,""],[349,"T"],[350,""],[361,"T"],[363,""],[369,"U"],[371,""],[373,"T"],[374,"U,T"],[376,"U"],[378,""],[393,"T"],[401,""],[404,"T"],[407,""],[422,"T"],[426,""],[429,"U"],[433,""],[448,"T"],[451,""],[454,"U,T"],[458,"U"],[462,""],[473,"T"],[475,""],[478,"T"],[479,""],[480,"U"],[481,""],[488,"U,T"],[489,"U"],[490,""],[672,"T"],[690,""],[700,"T"],[708,""],[723,"__D"],[730,""],[747,"T"],[756,""],[764,"U"],[773,""],[799,"__S"],[806,""],[820,"T"],[828,"U,T"],[837,"U"],[846,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[23165]}