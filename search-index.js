var searchIndex = new Map(JSON.parse('[["xm125_radar_monitor",{"t":"CHHHHHCHCCHHHHHCHHHCHPPPFGPPPPGPGPPPPPPGPGPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNONNNNNNNNNNNNNNNNOOOONNNNOOONNNNNNHOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPGIPNNNNNNNNNNNNNNNOOOOPPFGPNNNNNNNNNNNONNNNNONNNNNNNNONNNNNNNNNNNNNNNNNGGPPPPFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFONNNONNONNNNNNNNNNNNONNPPGPEPEEFFONNNNNNNNNNNNONNNNNOCNNNNOCNNNONNNNNNNOONNNOONOOOOOONNONCONCNNNNONNOONNNNNNNNNNNFNNNNNNNNONNNNNFFNNNNNNNNNNNONNNNONNNNNNNOOONNNNNNNNNPPFFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNONNNOONNNNNONNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS","n":["cli","configure_distance_range","configure_presence_parameters","debug_registers_if_connected","display_distance_result","display_presence_result","error","execute_command","firmware","gpio","handle_bootloader_command","handle_firmware_action","handle_firmware_checksum_command","handle_firmware_erase_command","handle_gpio_command","i2c","main","monitor_distance_continuous","monitor_presence_continuous","radar","run","Bootloader","Check","Checksum","Cli","Commands","Csv","Distance","Erase","Firmware","FirmwareAction","Gpio","GpioAction","Human","Info","Init","Json","Long","Medium","OutputFormat","Presence","PresenceRange","ResetBootloader","ResetRun","Short","Status","","Test","Update","Verify","augment_args","augment_args_for_update","augment_subcommands","","","augment_subcommands_for_update","","","borrow","","","","","","borrow_mut","","","","","","clone","","clone_into","","clone_to_uninit","","command","","command_for_update","debug_registers","firmware_path","fmt","","format","from","","","","","","from_arg_matches","","","","from_arg_matches_mut","","","","get_gpio_pins","get_i2c_device_path","gpio_boot","gpio_mcu_int","gpio_reset","gpio_wake","group_id","has_subcommand","","","i2c_address","i2c_bus","i2c_device","into","","","","","","parse_i2c_address","quiet","timeout","to_owned","","to_possible_value","","try_from","","","","","","try_into","","","","","","type_id","","","","","","update_from_arg_matches","","","","update_from_arg_matches_mut","","","","value_variants","","verbose","action","","continuous","","count","","frame_rate","interval","","max_range","min_range","range","","save_to","","sensitivity","confirm","firmware_type","","","force","test_mode","verbose","verify","CalibrationRequired","Config","DeviceError","Err","FirmwareError","I2c","InitializationFailed","InvalidParameters","InvalidResponse","Io","Json","MeasurementFailed","ModuleNotProgrammed","NotConnected","Ok","RadarError","Result","Timeout","borrow","borrow_mut","fmt","","from","","","","","into","source","to_string","try_from","try_into","type_id","message","","response","timeout","Breathing","Distance","FirmwareManager","FirmwareType","Presence","application_id","binary_filename","borrow","","borrow_mut","","calculate_binary_checksum","check_control_script","clone","clone_into","clone_to_uninit","control_script","default","display_name","enter_bootloader_mode","eq","erase_chip","firmware_path","firmware_update_needed","flash_firmware","fmt","from","","from_app_id","get_firmware_checksum","get_firmware_path","i2c_address","into","","new","reset_to_run_mode","to_owned","to_possible_value","try_from","","try_into","","type_id","","update_firmware","update_firmware_with_verification","value_variants","verify_device_in_run_mode","verify_firmware","GpioDirection","GpioValue","High","Input","Low","Output","XM125GpioController","XM125GpioPins","boot","borrow","","","","borrow_mut","","","","clone","","","clone_into","","","clone_to_uninit","","","default","","drop","eq","","export_gpio","fix_gpio141_bootloader_pin","fmt","","","","","from","","","","get_gpio_value","initialize","initialized","into","","","","is_initialized","mcu_interrupt","new","perform_reset_sequence","pins","","reset","reset_to_bootloader_mode","reset_to_run_mode","set_bootloader_mode","set_gpio_direction","set_gpio_value","set_run_mode","show_gpio_status","test_bootloader_control","to_owned","","","to_string","","try_export_gpio","try_from","","","","try_into","","","","type_id","","","","unbind_spi_controller","unbind_spi_device","wait_for_module_ready","wake_up","with_pins","I2cDevice","address","borrow","borrow_mut","configure_gpio","device","export_gpio","from","int_pin","into","is_module_ready","new","read_gpio_value","read_register","set_gpio_direction","set_gpio_value","sleep_module","try_from","try_into","type_id","wake_up_module","wakeup_pin","write_read_register","write_register","Breathing","Combined","DetectorMode","Distance","DistanceMeasurement","Presence","PresenceMeasurement","PresenceRange","XM125Config","XM125Radar","auto_reconnect","borrow","","","borrow_mut","","","clone","","clone_into","","clone_to_uninit","","config","configure_distance_detector","configure_distance_range","configure_presence_detector","configure_presence_range","connect","continuous_mode","debug","debug_registers","default","deserialize","","detector_mode","distance","eq","fmt","","frame_rate","from","","","get_detector_mode","get_info","get_status","get_status_raw","i2c","inter_detection_threshold","into","","","intra_detection_threshold","is_calibrated","is_connected","","last_calibration","last_measurement","length_m","max_profile","max_step_length","measure_distance","measure_presence","measurement_interval_ms","new","presence","presence_range","read_application_id","registers","reset_xm125_to_run_mode","serialize","","set_detector_mode","start_m","start_presence_detector","stop_presence_detector","sweeps_per_frame","threshold_sensitivity","to_owned","","try_from","","","try_into","","","type_id","","","RegisterDebugger","borrow","borrow_mut","debug_all_registers","debug_common_registers","debug_distance_registers","debug_presence_registers","debug_register","from","i2c","into","new","try_from","try_into","type_id","DistanceDetector","DistanceMeasurement","apply_config_and_calibrate","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","configure_detector","configure_range","deserialize","distance","fmt","from","","has_errors","i2c","into","","is_busy","measure","new","reset_module","serialize","strength","temperature","timestamp","to_owned","try_from","","try_into","","type_id","","wait_for_not_busy","write_command_safe","Long","Medium","PresenceDetector","PresenceMeasurement","PresenceRange","Short","apply_complete_configuration","apply_configuration","borrow","","","borrow_mut","","","calculate_optimal_profile","calculate_optimal_step_length","clone","","clone_into","","clone_to_uninit","","configuration_ok","configure_range","configure_thresholds","deserialize","","eq","fmt","","from","","","","has_errors","i2c","inter_presence_score","into","","","intra_presence_score","is_busy","measure","new","presence_detected","presence_distance","reset_module","serialize","","start_detector","stop_detector","timestamp","to_owned","","try_from","","","try_into","","","type_id","","","wait_for_not_busy","write_command_safe","CALIBRATION_TIMEOUT","CMD_APPLY_CONFIGURATION","CMD_APPLY_CONFIG_AND_CALIBRATE","CMD_CALIBRATE","CMD_MEASURE_DISTANCE","CMD_PRESENCE_APPLY_CONFIGURATION","CMD_PRESENCE_DISABLE_UART_LOGS","CMD_PRESENCE_ENABLE_UART_LOGS","CMD_PRESENCE_LOG_CONFIGURATION","CMD_PRESENCE_RESET_MODULE","CMD_PRESENCE_START_DETECTOR","CMD_PRESENCE_STOP_DETECTOR","CMD_RECALIBRATE","CMD_RESET_MODULE","DISTANCE_CLOSE_RANGE_LEAKAGE_CANCELLATION_DEFAULT","DISTANCE_END_DEFAULT","DISTANCE_FIXED_AMPLITUDE_THRESHOLD_VALUE_DEFAULT","DISTANCE_FIXED_STRENGTH_THRESHOLD_VALUE_DEFAULT","DISTANCE_MAX_PROFILE_DEFAULT","DISTANCE_MAX_STEP_LENGTH_DEFAULT","DISTANCE_NUM_FRAMES_RECORDED_THRESHOLD_DEFAULT","DISTANCE_PEAK_SORTING_DEFAULT","DISTANCE_REFLECTOR_SHAPE_DEFAULT","DISTANCE_SIGNAL_QUALITY_DEFAULT","DISTANCE_START_DEFAULT","DISTANCE_THRESHOLD_METHOD_DEFAULT","DISTANCE_THRESHOLD_SENSITIVITY_DEFAULT","MEASUREMENT_TIMEOUT","PRESENCE_REG_AUTO_PROFILE_ADDRESS","PRESENCE_REG_AUTO_STEP_LENGTH_ADDRESS","PRESENCE_REG_AUTO_SUBSWEEPS_ADDRESS","PRESENCE_REG_COMMAND_ADDRESS","PRESENCE_REG_DETECTOR_STATUS_ADDRESS","PRESENCE_REG_END_ADDRESS","PRESENCE_REG_FRAME_RATE_ADDRESS","PRESENCE_REG_HWAAS_ADDRESS","PRESENCE_REG_INTER_DETECTION_THRESHOLD_ADDRESS","PRESENCE_REG_INTRA_DETECTION_THRESHOLD_ADDRESS","PRESENCE_REG_MANUAL_PROFILE_ADDRESS","PRESENCE_REG_MANUAL_STEP_LENGTH_ADDRESS","PRESENCE_REG_MANUAL_SUBSWEEPS_ADDRESS","PRESENCE_REG_SIGNAL_QUALITY_ADDRESS","PRESENCE_REG_START_ADDRESS","REG_APPLICATION_ID","REG_CLOSE_RANGE_LEAKAGE_CANCELLATION","REG_COMMAND","REG_DETECTOR_STATUS","REG_DISTANCE_RESULT","REG_END_CONFIG","REG_FIXED_AMPLITUDE_THRESHOLD_VALUE","REG_FIXED_STRENGTH_THRESHOLD_VALUE","REG_INTER_PRESENCE_SCORE","REG_INTRA_PRESENCE_SCORE","REG_MAX_PROFILE","REG_MAX_STEP_LENGTH","REG_MEASURE_COUNTER","REG_NUM_FRAMES_RECORDED_THRESHOLD","REG_PEAK0_DISTANCE","REG_PEAK0_STRENGTH","REG_PEAK_SORTING","REG_PRESENCE_DISTANCE","REG_PRESENCE_RESULT","REG_PROTOCOL_STATUS","REG_REFLECTOR_SHAPE","REG_SIGNAL_QUALITY","REG_START_CONFIG","REG_THRESHOLD_METHOD","REG_THRESHOLD_SENSITIVITY","REG_VERSION","STATUS_BUSY","STATUS_BUSY_MASK","STATUS_CALIBRATION_DONE","STATUS_CONFIG_APPLY_OK","STATUS_CONFIG_CREATE_OK","STATUS_DETECTOR_CREATE_OK","STATUS_DETECTOR_READY","STATUS_ERROR","STATUS_ERROR_MASK","STATUS_MEASUREMENT_READY","STATUS_RSS_REGISTER_OK","STATUS_SENSOR_CALIBRATE_OK","STATUS_SENSOR_CREATE_OK"],"q":[[0,"xm125_radar_monitor"],[21,"xm125_radar_monitor::cli"],[153,"xm125_radar_monitor::cli::Commands"],[169,"xm125_radar_monitor::cli::FirmwareAction"],[177,"xm125_radar_monitor::error"],[210,"xm125_radar_monitor::error::RadarError"],[214,"xm125_radar_monitor::firmware"],[263,"xm125_radar_monitor::gpio"],[350,"xm125_radar_monitor::i2c"],[374,"xm125_radar_monitor::radar"],[464,"xm125_radar_monitor::radar::debug"],[479,"xm125_radar_monitor::radar::distance"],[517,"xm125_radar_monitor::radar::presence"],[582,"xm125_radar_monitor::radar::registers"],[664,"core::result"],[665,"core::option"],[666,"clap_builder::builder::command"],[667,"alloc::string"],[668,"core::fmt"],[669,"clap_builder::parser::matches::arg_matches"],[670,"clap_builder"],[671,"clap_builder::util::id"],[672,"clap_builder::builder::possible_value"],[673,"core::any"],[674,"std::io::error"],[675,"config::error"],[676,"serde_json::error"],[677,"linux_embedded_hal::i2c"],[678,"core::error"],[679,"alloc::vec"],[680,"serde_core::de"],[681,"serde_core::ser"],[682,"chrono::datetime"],[683,"core::time"]],"i":"`````````````````````B`00``AhBn20`0`10Bd2A`0`2`11021144Al035235203524103524141414100000410035241035203520000000352000035241`00414103524103524103524103520352410DfDhDjDl100100010100DnE`EbEd2Ef13l00Ib11111111110``1111111111111111FbFdFfFhBb0``000Fj10100111001010000101100001001101010100100``FnFl10``CjG`12301231231231230102300122330123000012301000010000000012323001230123012300010`Gb0000000000000000000000Gl0`0`0````Gjd210212121210000000`01211`22110210000010211000001110010`10`02101001121021021021`Hd0000000000000``Hf0Af100001100010111011110000010101011H`0```0Hn001Aj120112020201112022012201101200111001201102012012012011``````````````````````````````````````````````````````````````````````````````````","f":"`{{{f{bd}}{f{h}}}{{n{jl}}}}{{{f{bd}}{Ab{{f{A`}}}}{Ab{Ad}}{Ab{Ad}}{Ab{Ad}}{Ab{Ad}}}{{n{jl}}}}{{{f{bd}}{f{h}}}j}{{{f{Af}}{f{Ah}}}j}{{{f{Aj}}{f{Ah}}}j}`{{{f{Al}}{f{bd}}}{{n{jl}}}}``{{{f{Al}}An}{{n{jl}}}}{{{f{bd}}{f{B`}}{f{h}}}{{n{jl}}}}{{{Ab{{f{Bb}}}}An{f{h}}}{{n{jl}}}}{An{{n{jl}}}}{{{f{Al}}{f{Bd}}}{{n{jl}}}}`{{}j}{{{f{bd}}{f{Al}}{Ab{Bf}}Bh{Ab{{f{h}}}}}{{n{jl}}}}0`{Al{{n{jl}}}}`````````````````````````````{BjBj}0000000{f{{f{c}}}{}}00000{{{f{b}}}{{f{bc}}}{}}00000{{{f{Ah}}}Ah}{{{f{A`}}}A`}{{f{f{bc}}}j{}}0{{fBl}j}0{{}Bj}{AlBn}1{AlAn}{AlC`}{{{f{Ah}}{f{bCb}}}Cd}{{{f{A`}}{f{bCb}}}Cd}{AlAh}{cc{}}00000{{{f{Cf}}}{{n{AlCh}}}}{{{f{Cf}}}{{n{BnCh}}}}{{{f{Cf}}}{{n{B`Ch}}}}{{{f{Cf}}}{{n{BdCh}}}}{{{f{bCf}}}{{n{AlCh}}}}{{{f{bCf}}}{{n{BnCh}}}}{{{f{bCf}}}{{n{B`Ch}}}}{{{f{bCf}}}{{n{BdCh}}}}{{{f{Al}}}Cj}{{{f{Al}}}C`}{AlBf}000{{}{{Ab{Cl}}}}{{{f{h}}}An}00{AlCn}{AlBl}{AlAb}{{}c{}}00000{{{f{h}}}{{n{CnC`}}}}{AlAn}{AlBh}{fc{}}0{{{f{Ah}}}{{Ab{D`}}}}{{{f{A`}}}{{Ab{D`}}}}{c{{n{e}}}{}{}}00000{{}{{n{c}}}{}}00000{fDb}00000{{{f{bAl}}{f{Cf}}}{{n{jCh}}}}{{{f{bBn}}{f{Cf}}}{{n{jCh}}}}{{{f{bB`}}{f{Cf}}}{{n{jCh}}}}{{{f{bBd}}{f{Cf}}}{{n{jCh}}}}{{{f{bAl}}{f{bCf}}}{{n{jCh}}}}{{{f{bBn}}{f{bCf}}}{{n{jCh}}}}{{{f{bB`}}{f{bCf}}}{{n{jCh}}}}{{{f{bBd}}{f{bCf}}}{{n{jCh}}}}{{}{{f{{Dd{Ah}}}}}}{{}{{f{{Dd{A`}}}}}}{AlAn}{DfB`}{DhBd}{DjAn}{DlAn}{DjAb}{DlAb}0{DjBh}{DlBh}2232322{DnAn}{E`Bb}{EbAb}{EdAb}{E`An}{EfAn}{EdAn}2``````````````````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{l}}{f{bCb}}}Cd}0{Ehl}{Ejl}{Ell}{Enl}{cc{}}{{}c{}}{{{f{l}}}{{Ab{{f{F`}}}}}}{fC`}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fDb}{FbC`}{FdC`}{FfC`}{FhBh}`````{BbBf}{Bb{{f{h}}}}{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{{f{Fj}}Bb}{{n{C`l}}}}{{{f{Fj}}}{{n{jl}}}}{{{f{Bb}}}Bb}{{f{f{bc}}}j{}}{{fBl}j}{FjC`}{{}Fj}95{{{f{Bb}}{f{Bb}}}An}62{{{f{Fj}}BfBb}{{n{Anl}}}}{{{f{Fj}}{f{h}}}{{n{jl}}}}{{{f{Bb}}{f{bCb}}}Cd}{cc{}}0{BfBb}<{{{f{Fj}}Bb}C`}{FjCn}{{}c{}}0{{{f{h}}{f{h}}Cn}Fj}?{fc{}}{{{f{Bb}}}{{Ab{D`}}}}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{fDb}0{{{f{Fj}}Bb}{{n{jl}}}}{{{f{Fj}}BbAn}{{n{jl}}}}{{}{{f{{Dd{Bb}}}}}}{{{f{Fj}}}An}3````````{CjBf}{f{{f{c}}}{}}000{{{f{b}}}{{f{bc}}}{}}000{{{f{Cj}}}Cj}{{{f{Fl}}}Fl}{{{f{Fn}}}Fn}{{f{f{bc}}}j{}}00{{fBl}j}00{{}G`}{{}Cj}{{{f{bG`}}}j}{{{f{Fl}}{f{Fl}}}An}{{{f{Fn}}{f{Fn}}}An}{{{f{G`}}Bf{f{h}}}{{n{jl}}}}{{{f{G`}}}{{n{jl}}}}{{{f{Cj}}{f{bCb}}}Cd}{{{f{Fl}}{f{bCb}}}Cd}0{{{f{Fn}}{f{bCb}}}Cd}0{cc{}}000{{{f{G`}}Bf}{{n{Fnl}}}}{{{f{bG`}}}{{n{jl}}}}{G`An}{{}c{}}000{{{f{G`}}}An}{CjBf}{{}G`};{{{f{G`}}}{{f{Cj}}}}{G`Cj}3==={{{f{G`}}BfFl{f{h}}}{{n{jl}}}}{{{f{G`}}BfFn{f{h}}}{{n{jl}}}}???{fc{}}00{fC`}0{{{f{G`}}Bf}{{n{jEh}}}}{c{{n{e}}}{}{}}000{{}{{n{c}}}{}}000{fDb}000{{{f{G`}}{f{h}}}{{n{jl}}}}0{{{f{G`}}Bf}{{n{jl}}}}={CjG`}`{GbCn}{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{bGb}}{Ab{Bf}}{Ab{Bf}}}{{n{jl}}}}{GbGd}{{{f{Gb}}Bf}{{n{jl}}}}{cc{}}{GbAb}{{}c{}}{{{f{Gb}}}{{n{Anl}}}}{{{f{h}}Cn}{{n{Gbl}}}}{{{f{Gb}}Bf}{{n{Bll}}}}{{{f{bGb}}CnGf}{{n{{Gh{Bl}}l}}}}{{{f{Gb}}Bf{f{h}}}{{n{jl}}}}{{{f{Gb}}BfBl}{{n{jl}}}}{{{f{Gb}}}{{n{jl}}}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fDb}3;{{{f{bGb}}Cn{f{{Dd{Bl}}}}Gf}{{n{{Gh{Bl}}l}}}}{{{f{bGb}}Cn{f{{Dd{Bl}}}}}{{n{jl}}}}``````````{GjAn}{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{{f{Gl}}}Gl}{{{f{Gj}}}Gj}{{f{f{bc}}}j{}}0{{fBl}j}0{dGj}{{{f{bd}}}{{n{jl}}}}{{{f{bd}}{f{h}}}{{n{jl}}}}111{dAn}`1{{}Gj}{c{{n{Gl}}}Gn}{c{{n{Gj}}}Gn}{GjGl}`{{{f{Gl}}{f{Gl}}}An}{{{f{Gl}}{f{bCb}}}Cd}{{{f{Gj}}{f{bCb}}}Cd}{GjAd}{cc{}}00{{{f{d}}}Gl}{{{f{bd}}}{{n{C`l}}}}0{{{f{bd}}}{{n{Bfl}}}}{dGb}5{{}c{}}006>{{{f{d}}}An}?{dAb}08{GjBf}0{{{f{bd}}}{{n{Afl}}}}{{{f{bd}}}{{n{Ajl}}}}{GjBh}{Gbd}`{GjH`}:`{{{f{d}}}{{n{jl}}}}{{{f{Gl}}c}nHb}{{{f{Gj}}c}nHb}{{{f{bd}}Gl}j}{GjAd}{{{f{bd}}}{{n{jl}}}}0;1{fc{}}0{c{{n{e}}}{}{}}00{{}{{n{c}}}{}}00{fDb}00`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{bHd}}{f{h}}}{{n{jl}}}}{{{f{bHd}}}{{n{jl}}}}00{{{f{bHd}}Cn{f{h}}{f{h}}}{{n{jl}}}}{cc{}}{Hdf}{{}c{}}{{{f{bGb}}}Hd};:9``{{{f{bHf}}}{{n{jl}}}}9988{{{f{Af}}}Af}{{f{f{bc}}}j{}}{{fBl}j}3{{{f{bHf}}AdAd}{{n{jl}}}}{c{{n{Af}}}Gn}{AfAd}{{{f{Af}}{f{bCb}}}Cd};;{{{f{bHf}}}{{n{Anl}}}}{Hff};;1{{{f{bHf}}}{{n{Afl}}}}{{{f{bGb}}}Hf};{{{f{Af}}c}nHb}6{AfHh}{AfHj}{fc{}}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{fDb}0{{{f{bHf}}Hl}{{n{jl}}}}{{{f{bHf}}Bf}{{n{jl}}}}``````{{{f{bHn}}BfBf}{{n{jl}}}}{{{f{bHn}}}{{n{jl}}}}{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{BfBf}Bf}{BfBf}{{{f{H`}}}H`}{{{f{Aj}}}Aj}{{f{f{bc}}}j{}}0{{fBl}j}0{{{f{bHn}}}{{n{Anl}}}}{{{f{bHn}}H`{Ab{Ad}}{Ab{Ad}}}{{n{{I`{BfBf}}l}}}}{{{f{bHn}}AdAdAdBfBf}{{n{jl}}}}{c{{n{H`}}}Gn}{c{{n{Aj}}}Gn}{{{f{H`}}{f{H`}}}An}{{{f{H`}}{f{bCb}}}Cd}{{{f{Aj}}{f{bCb}}}Cd}{cc{}}{A`H`}119{Hnf}{AjAd}{{}c{}}001<{{{f{bHn}}}{{n{Ajl}}}}{{{f{bGb}}}Hn}{AjAn}4{{{f{bHn}}}{{n{jl}}}}{{{f{H`}}c}nHb}{{{f{Aj}}c}nHb}22{AjHj}{fc{}}0{c{{n{e}}}{}{}}00{{}{{n{c}}}{}}00{fDb}007{{{f{bHn}}Bf}{{n{jl}}}}{{}Hl}{{}Bf}00000000000000000000000001{{}Cn}00000000000000000000000000000000000000001111111111111","D":"AL`","p":[[0,"mut"],[5,"XM125Radar",374],[1,"reference",null,null,1],[1,"str"],[1,"unit"],[6,"RadarError",177],[6,"Result",664,null,1],[6,"PresenceRange",21],[6,"Option",665,null,1],[1,"f32"],[5,"DistanceMeasurement",479],[6,"OutputFormat",21],[5,"PresenceMeasurement",517],[5,"Cli",21],[1,"bool"],[6,"FirmwareAction",21],[6,"FirmwareType",214],[6,"GpioAction",21],[1,"u32"],[1,"u64"],[5,"Command",666],[1,"u8"],[6,"Commands",21],[5,"String",667],[5,"Formatter",668],[8,"Result",668],[5,"ArgMatches",669],[8,"Error",670],[5,"XM125GpioPins",263],[5,"Id",671],[1,"u16"],[5,"PossibleValue",672],[5,"TypeId",673],[1,"slice"],[15,"Firmware",153],[15,"Gpio",153],[15,"Distance",153],[15,"Presence",153],[15,"Erase",169],[15,"Update",169],[15,"Verify",169],[15,"Checksum",169],[15,"Bootloader",169],[5,"Error",674],[6,"ConfigError",675],[5,"Error",676],[5,"I2CError",677],[10,"Error",678],[15,"DeviceError",210],[15,"FirmwareError",210],[15,"InvalidResponse",210],[15,"Timeout",210],[5,"FirmwareManager",214],[6,"GpioDirection",263],[6,"GpioValue",263],[5,"XM125GpioController",263],[5,"I2cDevice",350],[5,"I2cdev",677],[1,"usize"],[5,"Vec",679],[5,"XM125Config",374],[6,"DetectorMode",374],[10,"Deserializer",680],[6,"PresenceRange",517],[10,"Serializer",681],[5,"RegisterDebugger",464],[5,"DistanceDetector",479],[1,"i16"],[5,"DateTime",682],[5,"Duration",683],[5,"PresenceDetector",517],[1,"tuple",null,null,1],[8,"Result",177]],"r":[[378,479],[380,517],[381,517]],"b":[[197,"impl-Debug-for-RadarError"],[198,"impl-Display-for-RadarError"],[199,"impl-From%3CError%3E-for-RadarError"],[200,"impl-From%3CConfigError%3E-for-RadarError"],[201,"impl-From%3CError%3E-for-RadarError"],[202,"impl-From%3CI2CError%3E-for-RadarError"],[297,"impl-Display-for-GpioDirection"],[298,"impl-Debug-for-GpioDirection"],[299,"impl-Display-for-GpioValue"],[300,"impl-Debug-for-GpioValue"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAALgBRgAAAAEABwAAAAkAAQAQAAAAFAAAABkAAQAfAAAAIQAAACgAAAAqAAAAMwAcAFIAAQBbAAcAaQADAHkAHwCaAAEAsgACALYACQDBAAoAzgAKANsAAADeAAMA5AAEAOsAAADtAAAA8AAAAPYAAAD7AAcABQEAAAoBAwARARUAKQEEADQBAAA+AQAASAEEAE4BCwBfAQMAZAEBAGcBAABqAQQAcAECAHQBGgCUAQEAlwEIAKcBAQCsAQEArwEFALcBAwC8AQAAvgEBAMEBAADEAQ8A2gEAANwBBQDjAQYA7AECAPIBAAD3AQAA+QEKAAYCBQAOAgUAFgIFAB8CBAAlAgAAKQIBAC4CAAAxAgIANQIBADkCCwBHAlEA","P":[[58,"T"],[70,""],[72,"T"],[74,""],[84,"T"],[90,""],[111,"U"],[117,""],[120,"T"],[122,""],[124,"U,T"],[130,"U"],[136,""],[195,"T"],[197,""],[203,"T"],[204,"U"],[205,""],[207,"U,T"],[208,"U"],[209,""],[221,"T"],[225,""],[228,"T"],[229,""],[240,"T"],[242,""],[246,"U"],[248,""],[250,"T"],[251,""],[252,"U,T"],[254,"U"],[256,""],[272,"T"],[280,""],[283,"T"],[286,""],[301,"T"],[305,""],[308,"U"],[312,""],[327,"T"],[330,""],[333,"U,T"],[337,"U"],[341,""],[352,"T"],[354,""],[357,"T"],[358,""],[359,"U"],[360,""],[367,"U,T"],[368,"U"],[369,""],[385,"T"],[391,""],[393,"T"],[395,""],[407,"__D"],[409,""],[415,"T"],[418,""],[424,"U"],[427,""],[445,"__S"],[447,""],[453,"T"],[455,"U,T"],[458,"U"],[461,""],[465,"T"],[467,""],[472,"T"],[473,""],[474,"U"],[475,""],[476,"U,T"],[477,"U"],[478,""],[482,"T"],[486,""],[487,"T"],[488,""],[491,"__D"],[492,""],[494,"T"],[496,""],[498,"U"],[500,""],[504,"__S"],[505,""],[508,"T"],[509,"U,T"],[511,"U"],[513,""],[525,"T"],[531,""],[535,"T"],[537,""],[542,"__D"],[544,""],[547,"T"],[548,""],[549,"T"],[551,""],[554,"U"],[557,""],[564,"__S"],[566,""],[569,"T"],[571,"U,T"],[574,"U"],[577,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[19443]}