var searchIndex = new Map(JSON.parse('[["xm125_radar_monitor",{"t":"CHHHHHCHCCHHHHHCHHHCHPPPPFGPPPPGPGPPPPPPPGPGGPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNONNNNNNNNNNNNNNNNNOOOONNNNOOONNNNNNNHOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPGIPNNNNNNNNNNNNNNNOOOOPPFGPNNNNNNNNNNNONNNNNONNNNNNNNONNNNNNNNNNNNNNNNNGGPPPPFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFONNNONNONNNNNNNNNNNNONNPPGPEPEEFFOONNNNNNNNNNNNONNNNNOCNNNNOCNNNONNNNNNNOOONNNOONOOOOOONNONCONCNNNNONNOONNNNNNNNNNNFNNNNNNNNONNNNNFFNNNNNNNNNNNONNNNONNNNNNNOOONNNNNNNNNPPFFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNONNNOONNNNNONNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS","n":["cli","configure_distance_range","configure_presence_parameters","debug_registers_if_connected","display_distance_result","display_presence_result","error","execute_command","firmware","gpio","handle_bootloader_command","handle_firmware_action","handle_firmware_checksum_command","handle_firmware_erase_command","handle_gpio_command","i2c","main","monitor_distance_continuous","monitor_presence_continuous","radar","run","Auto","Bootloader","Check","Checksum","Cli","Commands","Csv","Distance","Erase","Firmware","FirmwareAction","Gpio","GpioAction","Human","Info","Init","Json","Long","Manual","Medium","OutputFormat","Presence","PresenceRange","ProfileMode","ResetBootloader","ResetRun","Short","Status","","Test","Update","Verify","augment_args","augment_args_for_update","augment_subcommands","","","augment_subcommands_for_update","","","borrow","","","","","","","borrow_mut","","","","","","","clone","","","clone_into","","","clone_to_uninit","","","command","","command_for_update","debug_registers","firmware_path","fmt","","","format","from","","","","","","","from_arg_matches","","","","from_arg_matches_mut","","","","get_gpio_pins","get_i2c_device_path","gpio_boot","gpio_mcu_int","gpio_reset","gpio_wake","group_id","has_subcommand","","","i2c_address","i2c_bus","i2c_device","into","","","","","","","parse_i2c_address","quiet","timeout","to_owned","","","to_possible_value","","","try_from","","","","","","","try_into","","","","","","","type_id","","","","","","","update_from_arg_matches","","","","update_from_arg_matches_mut","","","","value_variants","","","verbose","action","","continuous","","count","","frame_rate","interval","","max_range","min_range","profile","range","","save_to","","sensitivity","confirm","firmware_type","","","force","test_mode","verbose","verify","CalibrationRequired","Config","DeviceError","Err","FirmwareError","I2c","InitializationFailed","InvalidParameters","InvalidResponse","Io","Json","MeasurementFailed","ModuleNotProgrammed","NotConnected","Ok","RadarError","Result","Timeout","borrow","borrow_mut","fmt","","from","","","","","into","source","to_string","try_from","try_into","type_id","message","","response","timeout","Breathing","Distance","FirmwareManager","FirmwareType","Presence","application_id","binary_filename","borrow","","borrow_mut","","calculate_binary_checksum","check_control_script","clone","clone_into","clone_to_uninit","control_script","default","display_name","enter_bootloader_mode","eq","erase_chip","firmware_path","firmware_update_needed","flash_firmware","fmt","from","","from_app_id","get_firmware_checksum","get_firmware_path","i2c_address","into","","new","reset_to_run_mode","to_owned","to_possible_value","try_from","","try_into","","type_id","","update_firmware","update_firmware_with_verification","value_variants","verify_device_in_run_mode","verify_firmware","GpioDirection","GpioValue","High","Input","Low","Output","XM125GpioController","XM125GpioPins","boot","borrow","","","","borrow_mut","","","","clone","","","clone_into","","","clone_to_uninit","","","default","","drop","eq","","export_gpio","fix_gpio141_bootloader_pin","fmt","","","","","from","","","","get_gpio_value","initialize","initialized","into","","","","is_initialized","mcu_interrupt","new","perform_reset_sequence","pins","","reset","reset_to_bootloader_mode","reset_to_run_mode","set_bootloader_mode","set_gpio_direction","set_gpio_value","set_run_mode","show_gpio_status","test_bootloader_control","to_owned","","","to_string","","try_export_gpio","try_from","","","","try_into","","","","type_id","","","","unbind_spi_controller","unbind_spi_device","wait_for_module_ready","wake_up","with_pins","I2cDevice","address","borrow","borrow_mut","configure_gpio","device","export_gpio","from","int_pin","into","is_module_ready","new","read_gpio_value","read_register","set_gpio_direction","set_gpio_value","sleep_module","try_from","try_into","type_id","wake_up_module","wakeup_pin","write_read_register","write_register","Breathing","Combined","DetectorMode","Distance","DistanceMeasurement","Presence","PresenceMeasurement","PresenceRange","XM125Config","XM125Radar","auto_profile_enabled","auto_reconnect","borrow","","","borrow_mut","","","clone","","clone_into","","clone_to_uninit","","config","configure_distance_detector","configure_distance_range","configure_presence_detector","configure_presence_range","connect","continuous_mode","debug","debug_registers","default","deserialize","","detector_mode","distance","eq","fmt","","frame_rate","from","","","get_detector_mode","get_info","get_status","get_status_raw","gpio_pins","i2c","inter_detection_threshold","into","","","intra_detection_threshold","is_calibrated","is_connected","","last_calibration","last_measurement","length_m","max_profile","max_step_length","measure_distance","measure_presence","measurement_interval_ms","new","presence","presence_range","read_application_id","registers","reset_xm125_to_run_mode","serialize","","set_detector_mode","start_m","start_presence_detector","stop_presence_detector","sweeps_per_frame","threshold_sensitivity","to_owned","","try_from","","","try_into","","","type_id","","","RegisterDebugger","borrow","borrow_mut","debug_all_registers","debug_common_registers","debug_distance_registers","debug_presence_registers","debug_register","from","i2c","into","new","try_from","try_into","type_id","DistanceDetector","DistanceMeasurement","apply_config_and_calibrate","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","configure_detector","configure_range","deserialize","distance","fmt","from","","has_errors","i2c","into","","is_busy","measure","new","reset_module","serialize","strength","temperature","timestamp","to_owned","try_from","","try_into","","type_id","","wait_for_not_busy","write_command_safe","Long","Medium","PresenceDetector","PresenceMeasurement","PresenceRange","Short","apply_complete_configuration","apply_configuration","borrow","","","borrow_mut","","","calculate_optimal_profile","calculate_optimal_step_length","clone","","clone_into","","clone_to_uninit","","configuration_ok","configure_range","configure_thresholds","deserialize","","eq","fmt","","from","","","","has_errors","i2c","inter_presence_score","into","","","intra_presence_score","is_busy","measure","new","presence_detected","presence_distance","reset_module","serialize","","start_detector","stop_detector","timestamp","to_owned","","try_from","","","try_into","","","type_id","","","wait_for_not_busy","write_command_safe","CALIBRATION_TIMEOUT","CMD_APPLY_CONFIGURATION","CMD_APPLY_CONFIG_AND_CALIBRATE","CMD_CALIBRATE","CMD_MEASURE_DISTANCE","CMD_PRESENCE_APPLY_CONFIGURATION","CMD_PRESENCE_DISABLE_UART_LOGS","CMD_PRESENCE_ENABLE_UART_LOGS","CMD_PRESENCE_LOG_CONFIGURATION","CMD_PRESENCE_RESET_MODULE","CMD_PRESENCE_START_DETECTOR","CMD_PRESENCE_STOP_DETECTOR","CMD_RECALIBRATE","CMD_RESET_MODULE","DISTANCE_CLOSE_RANGE_LEAKAGE_CANCELLATION_DEFAULT","DISTANCE_END_DEFAULT","DISTANCE_FIXED_AMPLITUDE_THRESHOLD_VALUE_DEFAULT","DISTANCE_FIXED_STRENGTH_THRESHOLD_VALUE_DEFAULT","DISTANCE_MAX_PROFILE_DEFAULT","DISTANCE_MAX_STEP_LENGTH_DEFAULT","DISTANCE_NUM_FRAMES_RECORDED_THRESHOLD_DEFAULT","DISTANCE_PEAK_SORTING_DEFAULT","DISTANCE_REFLECTOR_SHAPE_DEFAULT","DISTANCE_SIGNAL_QUALITY_DEFAULT","DISTANCE_START_DEFAULT","DISTANCE_THRESHOLD_METHOD_DEFAULT","DISTANCE_THRESHOLD_SENSITIVITY_DEFAULT","MEASUREMENT_TIMEOUT","PRESENCE_REG_AUTO_PROFILE_ADDRESS","PRESENCE_REG_AUTO_STEP_LENGTH_ADDRESS","PRESENCE_REG_AUTO_SUBSWEEPS_ADDRESS","PRESENCE_REG_COMMAND_ADDRESS","PRESENCE_REG_DETECTOR_STATUS_ADDRESS","PRESENCE_REG_END_ADDRESS","PRESENCE_REG_FRAME_RATE_ADDRESS","PRESENCE_REG_HWAAS_ADDRESS","PRESENCE_REG_INTER_DETECTION_THRESHOLD_ADDRESS","PRESENCE_REG_INTRA_DETECTION_THRESHOLD_ADDRESS","PRESENCE_REG_MANUAL_PROFILE_ADDRESS","PRESENCE_REG_MANUAL_STEP_LENGTH_ADDRESS","PRESENCE_REG_MANUAL_SUBSWEEPS_ADDRESS","PRESENCE_REG_SIGNAL_QUALITY_ADDRESS","PRESENCE_REG_START_ADDRESS","REG_APPLICATION_ID","REG_CLOSE_RANGE_LEAKAGE_CANCELLATION","REG_COMMAND","REG_DETECTOR_STATUS","REG_DISTANCE_RESULT","REG_END_CONFIG","REG_FIXED_AMPLITUDE_THRESHOLD_VALUE","REG_FIXED_STRENGTH_THRESHOLD_VALUE","REG_INTER_PRESENCE_SCORE","REG_INTRA_PRESENCE_SCORE","REG_MAX_PROFILE","REG_MAX_STEP_LENGTH","REG_MEASURE_COUNTER","REG_NUM_FRAMES_RECORDED_THRESHOLD","REG_PEAK0_DISTANCE","REG_PEAK0_STRENGTH","REG_PEAK_SORTING","REG_PRESENCE_DISTANCE","REG_PRESENCE_RESULT","REG_PROTOCOL_STATUS","REG_REFLECTOR_SHAPE","REG_SIGNAL_QUALITY","REG_START_CONFIG","REG_THRESHOLD_METHOD","REG_THRESHOLD_SENSITIVITY","REG_VERSION","STATUS_BUSY","STATUS_BUSY_MASK","STATUS_CALIBRATION_DONE","STATUS_CONFIG_APPLY_OK","STATUS_CONFIG_CREATE_OK","STATUS_DETECTOR_CREATE_OK","STATUS_DETECTOR_READY","STATUS_ERROR","STATUS_ERROR_MASK","STATUS_MEASUREMENT_READY","STATUS_RSS_REGISTER_OK","STATUS_SENSOR_CALIBRATE_OK","STATUS_SENSOR_CREATE_OK"],"q":[[0,"xm125_radar_monitor"],[21,"xm125_radar_monitor::cli"],[170,"xm125_radar_monitor::cli::Commands"],[187,"xm125_radar_monitor::cli::FirmwareAction"],[195,"xm125_radar_monitor::error"],[228,"xm125_radar_monitor::error::RadarError"],[232,"xm125_radar_monitor::firmware"],[281,"xm125_radar_monitor::gpio"],[368,"xm125_radar_monitor::i2c"],[392,"xm125_radar_monitor::radar"],[484,"xm125_radar_monitor::radar::debug"],[499,"xm125_radar_monitor::radar::distance"],[537,"xm125_radar_monitor::radar::presence"],[602,"xm125_radar_monitor::radar::registers"],[684,"core::result"],[685,"core::option"],[686,"clap_builder::builder::command"],[687,"alloc::string"],[688,"core::fmt"],[689,"clap_builder::parser::matches::arg_matches"],[690,"clap_builder"],[691,"clap_builder::util::id"],[692,"clap_builder::builder::possible_value"],[693,"core::any"],[694,"linux_embedded_hal::i2c"],[695,"std::io::error"],[696,"config::error"],[697,"serde_json::error"],[698,"core::error"],[699,"alloc::vec"],[700,"serde_core::de"],[701,"serde_core::ser"],[702,"chrono::datetime"],[703,"core::time"]],"i":"`````````````````````AfBb00``AjC`20`0`10Bf2A`50`2``11021144An03523520352416035241641641641600000416003524160352035200000003520000352416`00416416035241603524160352416035203524160DhDjDlDn1001000010100E`EbEdEf2Eh13l00Id11111111110``1111111111111111FdFfFhFjBd0``000Fl10100111001010000101100001001101010100100``G`Fn10``ClGb12301231231231230102300122330123000012301000010000000012323001230123012300010`Gd0000000000000000000000Gn0`0`0````Gl0d210212121210000000`01211`221102100000010211000001110010`10`02101001121021021021`Hf0000000000000``Hh0Ah100001100010111011110000010101011Hb0```0I`001Al120112020201112022012201101200111001201102012012012011``````````````````````````````````````````````````````````````````````````````````","f":"`{{{f{bd}}{f{h}}}{{n{jl}}}}{{{f{bd}}{Ab{{f{A`}}}}{Ab{Ad}}{Ab{Ad}}{Ab{Ad}}{Ab{Ad}}{f{Af}}}{{n{jl}}}}{{{f{bd}}{f{h}}}j}{{{f{Ah}}{f{Aj}}}j}{{{f{Al}}{f{Aj}}}j}`{{{f{An}}{f{bd}}}{{n{jl}}}}``{{{f{An}}B`}{{n{jl}}}}{{{f{bd}}{f{Bb}}{f{h}}}{{n{jl}}}}{{{Ab{{f{Bd}}}}B`{f{h}}}{{n{jl}}}}{B`{{n{jl}}}}{{{f{An}}{f{Bf}}}{{n{jl}}}}`{{}j}{{{f{bd}}{f{An}}{Ab{Bh}}Bj{Ab{{f{h}}}}}{{n{jl}}}}0`{An{{n{jl}}}}````````````````````````````````{BlBl}0000000{f{{f{c}}}{}}000000{{{f{b}}}{{f{bc}}}{}}000000{{{f{Aj}}}Aj}{{{f{A`}}}A`}{{{f{Af}}}Af}{{f{f{bc}}}j{}}00{{fBn}j}00{{}Bl}{AnC`}1{AnB`}{AnCb}{{{f{Aj}}{f{bCd}}}Cf}{{{f{A`}}{f{bCd}}}Cf}{{{f{Af}}{f{bCd}}}Cf}{AnAj}{cc{}}000000{{{f{Ch}}}{{n{AnCj}}}}{{{f{Ch}}}{{n{C`Cj}}}}{{{f{Ch}}}{{n{BbCj}}}}{{{f{Ch}}}{{n{BfCj}}}}{{{f{bCh}}}{{n{AnCj}}}}{{{f{bCh}}}{{n{C`Cj}}}}{{{f{bCh}}}{{n{BbCj}}}}{{{f{bCh}}}{{n{BfCj}}}}{{{f{An}}}Cl}{{{f{An}}}Cb}{AnBh}000{{}{{Ab{Cn}}}}{{{f{h}}}B`}00{AnD`}{AnBn}{AnAb}{{}c{}}000000{{{f{h}}}{{n{D`Cb}}}}{AnB`}{AnBj}{fc{}}00{{{f{Aj}}}{{Ab{Db}}}}{{{f{A`}}}{{Ab{Db}}}}{{{f{Af}}}{{Ab{Db}}}}{c{{n{e}}}{}{}}000000{{}{{n{c}}}{}}000000{fDd}000000{{{f{bAn}}{f{Ch}}}{{n{jCj}}}}{{{f{bC`}}{f{Ch}}}{{n{jCj}}}}{{{f{bBb}}{f{Ch}}}{{n{jCj}}}}{{{f{bBf}}{f{Ch}}}{{n{jCj}}}}{{{f{bAn}}{f{bCh}}}{{n{jCj}}}}{{{f{bC`}}{f{bCh}}}{{n{jCj}}}}{{{f{bBb}}{f{bCh}}}{{n{jCj}}}}{{{f{bBf}}{f{bCh}}}{{n{jCj}}}}{{}{{f{{Df{Aj}}}}}}{{}{{f{{Df{A`}}}}}}{{}{{f{{Df{Af}}}}}}{AnB`}{DhBb}{DjBf}{DlB`}{DnB`}{DlAb}{DnAb}0{DlBj}{DnBj}22{DnAf}43433{E`B`}{EbBd}{EdAb}{EfAb}{EbB`}{EhB`}{EfB`}2``````````````````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{l}}{f{bCd}}}Cf}0{Ejl}{Ell}{Enl}{F`l}{cc{}}{{}c{}}{{{f{l}}}{{Ab{{f{Fb}}}}}}{fCb}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fDd}{FdCb}{FfCb}{FhCb}{FjBj}`````{BdBh}{Bd{{f{h}}}}{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{{f{Fl}}Bd}{{n{Cbl}}}}{{{f{Fl}}}{{n{jl}}}}{{{f{Bd}}}Bd}{{f{f{bc}}}j{}}{{fBn}j}{FlCb}{{}Fl}95{{{f{Bd}}{f{Bd}}}B`}62{{{f{Fl}}BhBd}{{n{B`l}}}}{{{f{Fl}}{f{h}}}{{n{jl}}}}{{{f{Bd}}{f{bCd}}}Cf}{cc{}}0{BhBd}<{{{f{Fl}}Bd}Cb}{FlD`}{{}c{}}0{{{f{h}}{f{h}}D`}Fl}?{fc{}}{{{f{Bd}}}{{Ab{Db}}}}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{fDd}0{{{f{Fl}}Bd}{{n{jl}}}}{{{f{Fl}}BdB`}{{n{jl}}}}{{}{{f{{Df{Bd}}}}}}{{{f{Fl}}}B`}3````````{ClBh}{f{{f{c}}}{}}000{{{f{b}}}{{f{bc}}}{}}000{{{f{Cl}}}Cl}{{{f{Fn}}}Fn}{{{f{G`}}}G`}{{f{f{bc}}}j{}}00{{fBn}j}00{{}Gb}{{}Cl}{{{f{bGb}}}j}{{{f{Fn}}{f{Fn}}}B`}{{{f{G`}}{f{G`}}}B`}{{{f{Gb}}Bh{f{h}}}{{n{jl}}}}{{{f{Gb}}}{{n{jl}}}}{{{f{Cl}}{f{bCd}}}Cf}{{{f{Fn}}{f{bCd}}}Cf}0{{{f{G`}}{f{bCd}}}Cf}0{cc{}}000{{{f{Gb}}Bh}{{n{G`l}}}}{{{f{bGb}}}{{n{jl}}}}{GbB`}{{}c{}}000{{{f{Gb}}}B`}{ClBh}{{}Gb};{{{f{Gb}}}{{f{Cl}}}}{GbCl}3==={{{f{Gb}}BhFn{f{h}}}{{n{jl}}}}{{{f{Gb}}BhG`{f{h}}}{{n{jl}}}}???{fc{}}00{fCb}0{{{f{Gb}}Bh}{{n{jEl}}}}{c{{n{e}}}{}{}}000{{}{{n{c}}}{}}000{fDd}000{{{f{Gb}}{f{h}}}{{n{jl}}}}0{{{f{Gb}}Bh}{{n{jl}}}}={ClGb}`{GdD`}{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{bGd}}{Ab{Bh}}{Ab{Bh}}}{{n{jl}}}}{GdGf}{{{f{Gd}}Bh}{{n{jl}}}}{cc{}}{GdAb}{{}c{}}{{{f{Gd}}}{{n{B`l}}}}{{{f{h}}D`}{{n{Gdl}}}}{{{f{Gd}}Bh}{{n{Bnl}}}}{{{f{bGd}}D`Gh}{{n{{Gj{Bn}}l}}}}{{{f{Gd}}Bh{f{h}}}{{n{jl}}}}{{{f{Gd}}BhBn}{{n{jl}}}}{{{f{Gd}}}{{n{jl}}}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fDd}3;{{{f{bGd}}D`{f{{Df{Bn}}}}Gh}{{n{{Gj{Bn}}l}}}}{{{f{bGd}}D`{f{{Df{Bn}}}}}{{n{jl}}}}``````````{GlB`}0{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{{f{Gn}}}Gn}{{{f{Gl}}}Gl}{{f{f{bc}}}j{}}0{{fBn}j}0{dGl}{{{f{bd}}}{{n{jl}}}}{{{f{bd}}{f{h}}}{{n{jl}}}}111{dB`}`1{{}Gl}{c{{n{Gn}}}H`}{c{{n{Gl}}}H`}{GlGn}`{{{f{Gn}}{f{Gn}}}B`}{{{f{Gn}}{f{bCd}}}Cf}{{{f{Gl}}{f{bCd}}}Cf}{GlAd}{cc{}}00{{{f{d}}}Gn}{{{f{bd}}}{{n{Cbl}}}}0{{{f{bd}}}{{n{Bhl}}}}{dCl}{dGd}6{{}c{}}007?{{{f{d}}}B`}{dB`}{dAb}0:{GlBh}0{{{f{bd}}}{{n{Ahl}}}}{{{f{bd}}}{{n{All}}}}{GlBj}{{GdCl}d}`{GlHb}<`{{{f{d}}}{{n{jl}}}}{{{f{Gn}}c}nHd}{{{f{Gl}}c}nHd}{{{f{bd}}Gn}j}{GlAd}{{{f{bd}}}{{n{jl}}}}0;1{fc{}}0{c{{n{e}}}{}{}}00{{}{{n{c}}}{}}00{fDd}00`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{bHf}}{f{h}}}{{n{jl}}}}{{{f{bHf}}}{{n{jl}}}}00{{{f{bHf}}D`{f{h}}{f{h}}}{{n{jl}}}}{cc{}}{Hff}{{}c{}}{{{f{bGd}}}Hf};:9``{{{f{bHh}}}{{n{jl}}}}9988{{{f{Ah}}}Ah}{{f{f{bc}}}j{}}{{fBn}j}3{{{f{bHh}}AdAd}{{n{jl}}}}{c{{n{Ah}}}H`}{AhAd}{{{f{Ah}}{f{bCd}}}Cf};;{{{f{bHh}}}{{n{B`l}}}}{Hhf};;1{{{f{bHh}}}{{n{Ahl}}}}{{{f{bGd}}}Hh};{{{f{Ah}}c}nHd}6{AhHj}{AhHl}{fc{}}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{fDd}0{{{f{bHh}}Hn}{{n{jl}}}}{{{f{bHh}}Bh}{{n{jl}}}}``````{{{f{bI`}}BhBh}{{n{jl}}}}{{{f{bI`}}}{{n{jl}}}}{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{BhBh}Bh}{BhBh}{{{f{Hb}}}Hb}{{{f{Al}}}Al}{{f{f{bc}}}j{}}0{{fBn}j}0{{{f{bI`}}}{{n{B`l}}}}{{{f{bI`}}Hb{Ab{Ad}}{Ab{Ad}}}{{n{{Ib{BhBh}}l}}}}{{{f{bI`}}AdAdAdBhBhB`}{{n{jl}}}}{c{{n{Hb}}}H`}{c{{n{Al}}}H`}{{{f{Hb}}{f{Hb}}}B`}{{{f{Hb}}{f{bCd}}}Cf}{{{f{Al}}{f{bCd}}}Cf}{cc{}}0{A`Hb}19{I`f}{AlAd}{{}c{}}001<{{{f{bI`}}}{{n{All}}}}{{{f{bGd}}}I`}{AlB`}4{{{f{bI`}}}{{n{jl}}}}{{{f{Hb}}c}nHd}{{{f{Al}}c}nHd}22{AlHl}{fc{}}0{c{{n{e}}}{}{}}00{{}{{n{c}}}{}}00{fDd}007{{{f{bI`}}Bh}{{n{jl}}}}{{}Hn}{{}Bh}00000000000000000000000001{{}D`}00000000000000000000000000000000000000001111111111111","D":"ALj","p":[[0,"mut"],[5,"XM125Radar",392],[1,"reference",null,null,1],[1,"str"],[1,"unit"],[6,"RadarError",195],[6,"Result",684,null,1],[6,"PresenceRange",21],[6,"Option",685,null,1],[1,"f32"],[6,"ProfileMode",21],[5,"DistanceMeasurement",499],[6,"OutputFormat",21],[5,"PresenceMeasurement",537],[5,"Cli",21],[1,"bool"],[6,"FirmwareAction",21],[6,"FirmwareType",232],[6,"GpioAction",21],[1,"u32"],[1,"u64"],[5,"Command",686],[1,"u8"],[6,"Commands",21],[5,"String",687],[5,"Formatter",688],[8,"Result",688],[5,"ArgMatches",689],[8,"Error",690],[5,"XM125GpioPins",281],[5,"Id",691],[1,"u16"],[5,"PossibleValue",692],[5,"TypeId",693],[1,"slice"],[15,"Firmware",170],[15,"Gpio",170],[15,"Distance",170],[15,"Presence",170],[15,"Erase",187],[15,"Update",187],[15,"Verify",187],[15,"Checksum",187],[15,"Bootloader",187],[5,"I2CError",694],[5,"Error",695],[6,"ConfigError",696],[5,"Error",697],[10,"Error",698],[15,"DeviceError",228],[15,"FirmwareError",228],[15,"InvalidResponse",228],[15,"Timeout",228],[5,"FirmwareManager",232],[6,"GpioDirection",281],[6,"GpioValue",281],[5,"XM125GpioController",281],[5,"I2cDevice",368],[5,"I2cdev",694],[1,"usize"],[5,"Vec",699],[5,"XM125Config",392],[6,"DetectorMode",392],[10,"Deserializer",700],[6,"PresenceRange",537],[10,"Serializer",701],[5,"RegisterDebugger",484],[5,"DistanceDetector",499],[1,"i16"],[5,"DateTime",702],[5,"Duration",703],[5,"PresenceDetector",537],[1,"tuple",null,null,1],[8,"Result",195]],"r":[[396,499],[398,537],[399,537]],"b":[[215,"impl-Display-for-RadarError"],[216,"impl-Debug-for-RadarError"],[217,"impl-From%3CI2CError%3E-for-RadarError"],[218,"impl-From%3CError%3E-for-RadarError"],[219,"impl-From%3CConfigError%3E-for-RadarError"],[220,"impl-From%3CError%3E-for-RadarError"],[315,"impl-Debug-for-GpioDirection"],[316,"impl-Display-for-GpioDirection"],[317,"impl-Display-for-GpioValue"],[318,"impl-Debug-for-GpioValue"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAMcBRgAAAAEABwAAAAkAAQAQAAAAFAAAABoAAQAgAAAAIgAAACoAAAAsAAEANgAhAFoAAgBlAAcAcwADAIQAJQCrAAEAxAACAMgACQDTAAoA4AAKAO0AAADwAAMA9gAEAP0AAAD/AAAAAgEAAAgBAAANAQcAFwEAABwBAwAjARUAOwEEAEYBAABQAQAAWgEEAGABCwBxAQMAdgEBAHkBAAB8AQQAggECAIYBGwCnAQEAqgEIALoBAgDAAQEAwwEFAMsBAwDQAQAA0gEBANUBAADYAQ8A7gEAAPABBQD3AQYAAAICAAYCAAALAgAADQIKABoCBQAiAgUAKgIFADMCBAA6AgAAPQIBAEICAABFAgIASQIBAE0CCwBbAlEA","P":[[61,"T"],[75,""],[78,"T"],[81,""],[93,"T"],[100,""],[121,"U"],[128,""],[131,"T"],[134,""],[137,"U,T"],[144,"U"],[151,""],[213,"T"],[215,""],[221,"T"],[222,"U"],[223,""],[225,"U,T"],[226,"U"],[227,""],[239,"T"],[243,""],[246,"T"],[247,""],[258,"T"],[260,""],[264,"U"],[266,""],[268,"T"],[269,""],[270,"U,T"],[272,"U"],[274,""],[290,"T"],[298,""],[301,"T"],[304,""],[319,"T"],[323,""],[326,"U"],[330,""],[345,"T"],[348,""],[351,"U,T"],[355,"U"],[359,""],[370,"T"],[372,""],[375,"T"],[376,""],[377,"U"],[378,""],[385,"U,T"],[386,"U"],[387,""],[404,"T"],[410,""],[412,"T"],[414,""],[426,"__D"],[428,""],[434,"T"],[437,""],[444,"U"],[447,""],[465,"__S"],[467,""],[473,"T"],[475,"U,T"],[478,"U"],[481,""],[485,"T"],[487,""],[492,"T"],[493,""],[494,"U"],[495,""],[496,"U,T"],[497,"U"],[498,""],[502,"T"],[506,""],[507,"T"],[508,""],[511,"__D"],[512,""],[514,"T"],[516,""],[518,"U"],[520,""],[524,"__S"],[525,""],[528,"T"],[529,"U,T"],[531,"U"],[533,""],[545,"T"],[551,""],[555,"T"],[557,""],[562,"__D"],[564,""],[567,"T"],[569,""],[570,"T"],[571,""],[574,"U"],[577,""],[584,"__S"],[586,""],[589,"T"],[591,"U,T"],[594,"U"],[597,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[19739]}