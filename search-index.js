var searchIndex = new Map(JSON.parse('[["xm125_radar_monitor",{"t":"CHHHHHCHCCHHHHHCHHHCHPPPFGPPPPGPGPPPPPPGPGPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNONNNNNNNNNNNNNNNNOOOONNNNOOONNNNNNHOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPGIPNNNNNNNNNNNNNNNOOOOPPFGPNNNNNNNNNNNONNNNNONNNNNNNNONNNNNNNNNNNNNNNNNGGPPPPFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFONNNONNONNNNNNNNNNNNONNSSSSSSSSSSSSSPGFSSSSSSSSSSSSSSSSSSSPFSSSSSSSSSSSSSGPPFPPPPSPPPFGSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSPFFONONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNNNNNNNONNOONNNNNNNNNNNONNNNNNNNNNNNNNNOOONNNNNNNNNOOONONOOOOONNNNONOOOONNNONNNNNNNNNNNONOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["cli","configure_distance_range","configure_presence_parameters","debug_registers_if_connected","display_distance_result","display_presence_result","error","execute_command","firmware","gpio","handle_bootloader_command","handle_firmware_action","handle_firmware_checksum_command","handle_firmware_erase_command","handle_gpio_command","i2c","main","monitor_distance_continuous","monitor_presence_continuous","radar","run","Bootloader","Check","Checksum","Cli","Commands","Csv","Distance","Erase","Firmware","FirmwareAction","Gpio","GpioAction","Human","Info","Init","Json","Long","Medium","OutputFormat","Presence","PresenceRange","ResetBootloader","ResetRun","Short","Status","","Test","Update","Verify","augment_args","augment_args_for_update","augment_subcommands","","","augment_subcommands_for_update","","","borrow","","","","","","borrow_mut","","","","","","clone","","clone_into","","clone_to_uninit","","command","","command_for_update","debug_registers","firmware_path","fmt","","format","from","","","","","","from_arg_matches","","","","from_arg_matches_mut","","","","get_gpio_pins","get_i2c_device_path","gpio_boot","gpio_mcu_int","gpio_reset","gpio_wake","group_id","has_subcommand","","","i2c_address","i2c_bus","i2c_device","into","","","","","","parse_i2c_address","quiet","timeout","to_owned","","to_possible_value","","try_from","","","","","","try_into","","","","","","type_id","","","","","","update_from_arg_matches","","","","update_from_arg_matches_mut","","","","value_variants","","verbose","action","","continuous","","count","","frame_rate","interval","","max_range","min_range","range","","save_to","","sensitivity","confirm","firmware_type","","","force","test_mode","verbose","verify","CalibrationRequired","Config","DeviceError","Err","FirmwareError","I2c","InitializationFailed","InvalidParameters","InvalidResponse","Io","Json","MeasurementFailed","ModuleNotProgrammed","NotConnected","Ok","RadarError","Result","Timeout","borrow","borrow_mut","fmt","","from","","","","","into","source","to_string","try_from","try_into","type_id","message","","response","timeout","Breathing","Distance","FirmwareManager","FirmwareType","Presence","application_id","binary_filename","borrow","","borrow_mut","","calculate_binary_checksum","check_control_script","clone","clone_into","clone_to_uninit","control_script","default","display_name","enter_bootloader_mode","eq","erase_chip","firmware_path","firmware_update_needed","flash_firmware","fmt","from","","from_app_id","get_firmware_checksum","get_firmware_path","i2c_address","into","","new","reset_to_run_mode","to_owned","to_possible_value","try_from","","try_into","","type_id","","update_firmware","update_firmware_with_verification","value_variants","verify_device_in_run_mode","verify_firmware","GpioDirection","GpioValue","High","Input","Low","Output","XM125GpioController","XM125GpioPins","boot","borrow","","","","borrow_mut","","","","clone","","","clone_into","","","clone_to_uninit","","","default","","drop","eq","","export_gpio","fix_gpio141_bootloader_pin","fmt","","","","","from","","","","get_gpio_value","initialize","initialized","into","","","","is_initialized","mcu_interrupt","new","perform_reset_sequence","pins","","reset","reset_to_bootloader_mode","reset_to_run_mode","set_bootloader_mode","set_gpio_direction","set_gpio_value","set_run_mode","show_gpio_status","test_bootloader_control","to_owned","","","to_string","","try_export_gpio","try_from","","","","try_into","","","","type_id","","","","unbind_spi_controller","unbind_spi_device","wait_for_module_ready","wake_up","with_pins","I2cDevice","address","borrow","borrow_mut","configure_gpio","device","export_gpio","from","int_pin","into","is_module_ready","new","read_gpio_value","read_register","set_gpio_direction","set_gpio_value","sleep_module","try_from","try_into","type_id","wake_up_module","wakeup_pin","write_read_register","write_register","BREATHING_DISTANCE_DETERMINATION_DURATION_S_DEFAULT","BREATHING_END_DEFAULT","BREATHING_FRAME_RATE_DEFAULT","BREATHING_HIGHEST_BREATHING_RATE_DEFAULT","BREATHING_HWAAS_DEFAULT","BREATHING_INTRA_DETECTION_THRESHOLD_DEFAULT","BREATHING_LOWEST_BREATHING_RATE_DEFAULT","BREATHING_NUM_DISTANCES_TO_ANALYZE_DEFAULT","BREATHING_PROFILE_DEFAULT","BREATHING_START_DEFAULT","BREATHING_SWEEPS_PER_FRAME_DEFAULT","BREATHING_TIME_SERIES_LENGTH_S_DEFAULT","BREATHING_USE_PRESENCE_PROCESSOR_DEFAULT","Breathing","BreathingAppState","BreathingMeasurement","CALIBRATION_TIMEOUT","CMD_APPLY_CONFIGURATION","CMD_APPLY_CONFIG_AND_CALIBRATE","CMD_BREATHING_APPLY_CONFIGURATION","CMD_BREATHING_START_APP","CMD_BREATHING_STOP_APP","CMD_CALIBRATE","CMD_DISABLE_CONTINUOUS_MODE","CMD_DISABLE_DETECTOR","CMD_ENABLE_CONTINUOUS_MODE","CMD_ENABLE_DETECTOR","CMD_ENABLE_PRESENCE_DETECTOR","CMD_MEASURE_DISTANCE","CMD_MEASURE_PRESENCE","CMD_PRESENCE_APPLY_CONFIGURATION","CMD_PRESENCE_START","CMD_PRESENCE_STOP","CMD_RECALIBRATE","CMD_RESET_MODULE","Combined","CombinedMeasurement","DISTANCE_CLOSE_RANGE_LEAKAGE_CANCELLATION_DEFAULT","DISTANCE_END_DEFAULT","DISTANCE_FIXED_AMPLITUDE_THRESHOLD_VALUE_DEFAULT","DISTANCE_FIXED_STRENGTH_THRESHOLD_VALUE_DEFAULT","DISTANCE_MAX_PROFILE_DEFAULT","DISTANCE_MAX_STEP_LENGTH_DEFAULT","DISTANCE_NUM_FRAMES_RECORDED_THRESHOLD_DEFAULT","DISTANCE_PEAK_SORTING_DEFAULT","DISTANCE_REFLECTOR_SHAPE_DEFAULT","DISTANCE_SIGNAL_QUALITY_DEFAULT","DISTANCE_START_DEFAULT","DISTANCE_THRESHOLD_METHOD_DEFAULT","DISTANCE_THRESHOLD_SENSITIVITY_DEFAULT","DetectorMode","DetermineDistance","Distance","DistanceMeasurement","EstimateBreathingRate","Init","IntraPresence","Long","MEASUREMENT_TIMEOUT","Medium","NoPresence","Presence","PresenceMeasurement","PresenceRange","REG_APPLICATION_ID","REG_BREATHING_APP_STATE","REG_BREATHING_DISTANCE_DETERMINATION_DURATION_S","REG_BREATHING_END","REG_BREATHING_FRAME_RATE","REG_BREATHING_HIGHEST_BREATHING_RATE","REG_BREATHING_HWAAS","REG_BREATHING_INTRA_DETECTION_THRESHOLD","REG_BREATHING_LOWEST_BREATHING_RATE","REG_BREATHING_NUM_DISTANCES_TO_ANALYZE","REG_BREATHING_PROFILE","REG_BREATHING_RATE","REG_BREATHING_RESULT","REG_BREATHING_START","REG_BREATHING_SWEEPS_PER_FRAME","REG_BREATHING_TIME_SERIES_LENGTH_S","REG_BREATHING_USE_PRESENCE_PROCESSOR","REG_CLOSE_RANGE_LEAKAGE_CANCELLATION","REG_COMMAND","REG_DETECTOR_STATUS","REG_DISTANCE_RESULT","REG_END_CONFIG","REG_FIXED_AMPLITUDE_THRESHOLD_VALUE","REG_FIXED_STRENGTH_THRESHOLD_VALUE","REG_FRAME_RATE","REG_INTER_DETECTION_THRESHOLD","REG_INTER_PRESENCE_SCORE","REG_INTRA_DETECTION_THRESHOLD","REG_INTRA_PRESENCE_SCORE","REG_MAX_PROFILE","REG_MAX_STEP_LENGTH","REG_MEASURE_COUNTER","REG_NUM_FRAMES_RECORDED_THRESHOLD","REG_PEAK0_DISTANCE","REG_PEAK0_STRENGTH","REG_PEAK_SORTING","REG_PRESENCE_DISTANCE","REG_PRESENCE_END","REG_PRESENCE_RESULT","REG_PRESENCE_START","REG_PROTOCOL_STATUS","REG_REFLECTOR_SHAPE","REG_SENSOR_INFO","REG_SIGNAL_QUALITY","REG_START_CONFIG","REG_THRESHOLD_METHOD","REG_THRESHOLD_SENSITIVITY","REG_VERSION","STATUS_ALL_ERROR_MASK","STATUS_ALL_OK_MASK","STATUS_BUSY","STATUS_CALIBRATION_DONE","STATUS_CONFIG_APPLY_ERROR","STATUS_CONFIG_APPLY_OK","STATUS_CONFIG_CREATE_ERROR","STATUS_CONFIG_CREATE_OK","STATUS_DETECTOR_CALIBRATE_ERROR","STATUS_DETECTOR_CREATE_ERROR","STATUS_DETECTOR_CREATE_OK","STATUS_DETECTOR_READY","STATUS_DISTANCE_BUSY","STATUS_DISTANCE_CALIBRATION_BUFFER_ERROR","STATUS_DISTANCE_CALIBRATION_BUFFER_OK","STATUS_DISTANCE_CONFIG_APPLY_ERROR","STATUS_DISTANCE_CONFIG_APPLY_OK","STATUS_DISTANCE_CONFIG_CREATE_ERROR","STATUS_DISTANCE_CONFIG_CREATE_OK","STATUS_DISTANCE_DETECTOR_BUFFER_ERROR","STATUS_DISTANCE_DETECTOR_BUFFER_OK","STATUS_DISTANCE_DETECTOR_CALIBRATE_ERROR","STATUS_DISTANCE_DETECTOR_CALIBRATE_OK","STATUS_DISTANCE_DETECTOR_CREATE_ERROR","STATUS_DISTANCE_DETECTOR_CREATE_OK","STATUS_DISTANCE_DETECTOR_ERROR","STATUS_DISTANCE_RSS_REGISTER_ERROR","STATUS_DISTANCE_RSS_REGISTER_OK","STATUS_DISTANCE_SENSOR_BUFFER_ERROR","STATUS_DISTANCE_SENSOR_BUFFER_OK","STATUS_DISTANCE_SENSOR_CALIBRATE_ERROR","STATUS_DISTANCE_SENSOR_CALIBRATE_OK","STATUS_DISTANCE_SENSOR_CREATE_ERROR","STATUS_DISTANCE_SENSOR_CREATE_OK","STATUS_ERROR","STATUS_MEASUREMENT_READY","STATUS_PRESENCE_BUSY","STATUS_PRESENCE_CONFIG_APPLY_ERROR","STATUS_PRESENCE_CONFIG_APPLY_OK","STATUS_PRESENCE_CONFIG_CREATE_ERROR","STATUS_PRESENCE_CONFIG_CREATE_OK","STATUS_PRESENCE_DETECTOR_BUFFER_ERROR","STATUS_PRESENCE_DETECTOR_BUFFER_OK","STATUS_PRESENCE_DETECTOR_CREATE_ERROR","STATUS_PRESENCE_DETECTOR_CREATE_OK","STATUS_PRESENCE_DETECTOR_ERROR","STATUS_PRESENCE_RSS_REGISTER_ERROR","STATUS_PRESENCE_RSS_REGISTER_OK","STATUS_PRESENCE_SENSOR_BUFFER_ERROR","STATUS_PRESENCE_SENSOR_BUFFER_OK","STATUS_PRESENCE_SENSOR_CALIBRATE_ERROR","STATUS_PRESENCE_SENSOR_CALIBRATE_OK","STATUS_PRESENCE_SENSOR_CREATE_ERROR","STATUS_PRESENCE_SENSOR_CREATE_OK","STATUS_RSS_REGISTER_OK","STATUS_SENSOR_CALIBRATE_ERROR","STATUS_SENSOR_CALIBRATE_OK","STATUS_SENSOR_CREATE_ERROR","STATUS_SENSOR_CREATE_OK","Short","XM125Config","XM125Radar","app_state","auto_connect","auto_reconnect","borrow","","","","","","","","","borrow_mut","","","","","","","","","breathing_rate","calibrate","clone","","","","","","","","clone_into","","","","","","","","clone_to_uninit","","","","","","","","config","configure_detector","configure_presence_range","connect","connect_async","continuous_mode","debug_breathing_registers","debug_common_registers","debug_distance_registers","debug_presence_registers","debug_register","debug_registers","default","deserialize","","","","","","","detector_mode","disconnect","display_name","distance","","eq","","","fmt","","","","","","","","frame_rate","from","","","","","","","","","","from_u32","get_detector_mode","get_info","get_status","get_status_raw","i2c","inter_detection_threshold","inter_presence_score","into","","","","","","","","","intra_detection_threshold","intra_presence_score","is_calibrated","is_connected","","is_continuous_monitoring","last_calibration","last_measurement","length_m","max_profile","max_step_length","measure_breathing","measure_combined","measure_distance","measure_presence","measurement_interval_ms","new","presence","presence_detected","presence_distance","presence_range","read_application_id","read_distance_result","reset_xm125_to_run_mode","result_ready","send_command","serialize","","","","","","","set_config","set_detector_mode","start_continuous_monitoring","start_m","stop_continuous_monitoring","strength","sweeps_per_frame","temperature","","threshold_sensitivity","timestamp","","","","to_owned","","","","","","","","try_from","","","","","","","","","try_into","","","","","","","","","type_id","","","","","","","","","validate_firmware_compatibility","wait_for_calibration","wait_for_measurement","write_breathing_configuration","write_distance_configuration"],"q":[[0,"xm125_radar_monitor"],[21,"xm125_radar_monitor::cli"],[153,"xm125_radar_monitor::cli::Commands"],[169,"xm125_radar_monitor::cli::FirmwareAction"],[177,"xm125_radar_monitor::error"],[210,"xm125_radar_monitor::error::RadarError"],[214,"xm125_radar_monitor::firmware"],[263,"xm125_radar_monitor::gpio"],[350,"xm125_radar_monitor::i2c"],[374,"xm125_radar_monitor::radar"],[746,"core::result"],[747,"core::option"],[748,"clap_builder::builder::command"],[749,"alloc::string"],[750,"core::fmt"],[751,"clap_builder::parser::matches::arg_matches"],[752,"clap_builder"],[753,"clap_builder::util::id"],[754,"clap_builder::builder::possible_value"],[755,"core::any"],[756,"std::io::error"],[757,"serde_json::error"],[758,"linux_embedded_hal::i2c"],[759,"config::error"],[760,"core::error"],[761,"alloc::vec"],[762,"core::time"],[763,"serde_core::de"],[764,"serde_core::ser"],[765,"chrono::datetime"]],"i":"`````````````````````B`00``AhBn20`0`10Bd2A`0`2`11021144Al035235203524103524141414100000410035241035203520000000352000035241`00414103524103524103524103520352410DfDhDjDl100100010100DnE`EbEd2Ef13l00I`11111111110``1111111111111111FbFdFfFhBb0``000Fj10100111001010000101100001001101010100100``FnFl10``CjG`12301231231231230102300122330123000012301000010000000012323001230123012300010`Gb0000000000000000000000`````````````Hb`````````````````````0```````````````Gn1`000Hd`012`````````````````````````````````````````````````````````````````````````````````````````````````````````````0``GldH`153AfAjHf753486210753548621075386210753862107534444444444443862107534720867862107533486621075374444431486210753314444443334444340113444548621075444342325321058621075348621075348621075348621075344444","f":"`{{{f{bd}}{f{h}}}{{n{jl}}}}{{{f{bd}}{Ab{{f{A`}}}}{Ab{Ad}}{Ab{Ad}}{Ab{Ad}}{Ab{Ad}}}{{n{jl}}}}{{{f{bd}}{f{h}}}j}{{{f{Af}}{f{Ah}}}j}{{{f{Aj}}{f{Ah}}}j}`{{{f{Al}}{f{bd}}}{{n{jl}}}}``{{{f{Al}}An}{{n{jl}}}}{{{f{bd}}{f{B`}}{f{h}}}{{n{jl}}}}{{{Ab{{f{Bb}}}}An{f{h}}}{{n{jl}}}}{An{{n{jl}}}}{{{f{Al}}{f{Bd}}}{{n{jl}}}}`{{}j}{{{f{bd}}{f{Al}}{Ab{Bf}}Bh{Ab{{f{h}}}}}{{n{jl}}}}0`{Al{{n{jl}}}}`````````````````````````````{BjBj}0000000{f{{f{c}}}{}}00000{{{f{b}}}{{f{bc}}}{}}00000{{{f{Ah}}}Ah}{{{f{A`}}}A`}{{f{f{bc}}}j{}}0{{fBl}j}0{{}Bj}{AlBn}1{AlAn}{AlC`}{{{f{Ah}}{f{bCb}}}Cd}{{{f{A`}}{f{bCb}}}Cd}{AlAh}{cc{}}00000{{{f{Cf}}}{{n{AlCh}}}}{{{f{Cf}}}{{n{BnCh}}}}{{{f{Cf}}}{{n{B`Ch}}}}{{{f{Cf}}}{{n{BdCh}}}}{{{f{bCf}}}{{n{AlCh}}}}{{{f{bCf}}}{{n{BnCh}}}}{{{f{bCf}}}{{n{B`Ch}}}}{{{f{bCf}}}{{n{BdCh}}}}{{{f{Al}}}Cj}{{{f{Al}}}C`}{AlBf}000{{}{{Ab{Cl}}}}{{{f{h}}}An}00{AlCn}{AlBl}{AlAb}{{}c{}}00000{{{f{h}}}{{n{CnC`}}}}{AlAn}{AlBh}{fc{}}0{{{f{Ah}}}{{Ab{D`}}}}{{{f{A`}}}{{Ab{D`}}}}{c{{n{e}}}{}{}}00000{{}{{n{c}}}{}}00000{fDb}00000{{{f{bAl}}{f{Cf}}}{{n{jCh}}}}{{{f{bBn}}{f{Cf}}}{{n{jCh}}}}{{{f{bB`}}{f{Cf}}}{{n{jCh}}}}{{{f{bBd}}{f{Cf}}}{{n{jCh}}}}{{{f{bAl}}{f{bCf}}}{{n{jCh}}}}{{{f{bBn}}{f{bCf}}}{{n{jCh}}}}{{{f{bB`}}{f{bCf}}}{{n{jCh}}}}{{{f{bBd}}{f{bCf}}}{{n{jCh}}}}{{}{{f{{Dd{Ah}}}}}}{{}{{f{{Dd{A`}}}}}}{AlAn}{DfB`}{DhBd}{DjAn}{DlAn}{DjAb}{DlAb}0{DjBh}{DlBh}2232322{DnAn}{E`Bb}{EbAb}{EdAb}{E`An}{EfAn}{EdAn}2``````````````````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{l}}{f{bCb}}}Cd}0{Ehl}{Ejl}{Ell}{cc{}}{Enl}{{}c{}}{{{f{l}}}{{Ab{{f{F`}}}}}}{fC`}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fDb}{FbC`}{FdC`}{FfC`}{FhBh}`````{BbBf}{Bb{{f{h}}}}{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{{f{Fj}}Bb}{{n{C`l}}}}{{{f{Fj}}}{{n{jl}}}}{{{f{Bb}}}Bb}{{f{f{bc}}}j{}}{{fBl}j}{FjC`}{{}Fj}95{{{f{Bb}}{f{Bb}}}An}62{{{f{Fj}}BfBb}{{n{Anl}}}}{{{f{Fj}}{f{h}}}{{n{jl}}}}{{{f{Bb}}{f{bCb}}}Cd}{cc{}}0{BfBb}<{{{f{Fj}}Bb}C`}{FjCn}{{}c{}}0{{{f{h}}{f{h}}Cn}Fj}?{fc{}}{{{f{Bb}}}{{Ab{D`}}}}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{fDb}0{{{f{Fj}}Bb}{{n{jl}}}}{{{f{Fj}}BbAn}{{n{jl}}}}{{}{{f{{Dd{Bb}}}}}}{{{f{Fj}}}An}3````````{CjBf}{f{{f{c}}}{}}000{{{f{b}}}{{f{bc}}}{}}000{{{f{Cj}}}Cj}{{{f{Fl}}}Fl}{{{f{Fn}}}Fn}{{f{f{bc}}}j{}}00{{fBl}j}00{{}G`}{{}Cj}{{{f{bG`}}}j}{{{f{Fl}}{f{Fl}}}An}{{{f{Fn}}{f{Fn}}}An}{{{f{G`}}Bf{f{h}}}{{n{jl}}}}{{{f{G`}}}{{n{jl}}}}{{{f{Cj}}{f{bCb}}}Cd}{{{f{Fl}}{f{bCb}}}Cd}0{{{f{Fn}}{f{bCb}}}Cd}0{cc{}}000{{{f{G`}}Bf}{{n{Fnl}}}}{{{f{bG`}}}{{n{jl}}}}{G`An}{{}c{}}000{{{f{G`}}}An}{CjBf}{{}G`};{{{f{G`}}}{{f{Cj}}}}{G`Cj}3==={{{f{G`}}BfFl{f{h}}}{{n{jl}}}}{{{f{G`}}BfFn{f{h}}}{{n{jl}}}}???{fc{}}00{fC`}0{{{f{G`}}Bf}{{n{jEh}}}}{c{{n{e}}}{}{}}000{{}{{n{c}}}{}}000{fDb}000{{{f{G`}}{f{h}}}{{n{jl}}}}0{{{f{G`}}Bf}{{n{jl}}}}={CjG`}`{GbCn}{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{bGb}}{Ab{Bf}}{Ab{Bf}}}{{n{jl}}}}{GbGd}{{{f{Gb}}Bf}{{n{jl}}}}{cc{}}{GbAb}{{}c{}}{{{f{Gb}}}{{n{Anl}}}}{{{f{h}}Cn}{{n{Gbl}}}}{{{f{Gb}}Bf}{{n{Bll}}}}{{{f{bGb}}CnGf}{{n{{Gh{Bl}}l}}}}{{{f{Gb}}Bf{f{h}}}{{n{jl}}}}{{{f{Gb}}BfBl}{{n{jl}}}}{{{f{Gb}}}{{n{jl}}}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fDb}3;{{{f{bGb}}Cn{f{{Dd{Bl}}}}Gf}{{n{{Gh{Bl}}l}}}}{{{f{bGb}}Cn{f{{Dd{Bl}}}}}{{n{jl}}}}{{}Bf}000000000000```{{}Gj}111111111111111111``1111111111111````````0`````{{}Cn}0000000000000000000000000000000000000000000000022222222222222222222222222222222222222222222222222222222222```{GlGn}{{{f{bd}}}{{n{jl}}}}{H`An}{f{{f{c}}}{}}00000000{{{f{b}}}{{f{bc}}}{}}00000000{GlAd}4{{{f{Hb}}}Hb}{{{f{Hd}}}Hd}{{{f{Af}}}Af}{{{f{Aj}}}Aj}{{{f{Hf}}}Hf}{{{f{Gn}}}Gn}{{{f{Gl}}}Gl}{{{f{H`}}}H`}{{f{f{bc}}}j{}}0000000{{fBl}j}0000000{dH`}?{{{f{bd}}}j}{{{f{bd}}}{{n{jl}}}}0{dAn}1111{{{f{bd}}Cn{f{h}}{f{h}}}{{n{jl}}}}{{{f{bd}}{f{h}}}{{n{jl}}}}{{}H`}{c{{n{Hb}}}Hh}{c{{n{Hd}}}Hh}{c{{n{Af}}}Hh}{c{{n{Aj}}}Hh}{c{{n{Hf}}}Hh}{c{{n{Gn}}}Hh}{c{{n{Gl}}}Hh}{H`Hb}={{{f{Gn}}}{{f{h}}}}{AfAd}{HfAb}{{{f{Hb}}{f{Hb}}}An}{{{f{Hd}}{f{Hd}}}An}{{{f{Gn}}{f{Gn}}}An}{{{f{Hb}}{f{bCb}}}Cd}{{{f{Hd}}{f{bCb}}}Cd}{{{f{Af}}{f{bCb}}}Cd}{{{f{Aj}}{f{bCb}}}Cd}{{{f{Hf}}{f{bCb}}}Cd}{{{f{Gn}}{f{bCb}}}Cd}{{{f{Gl}}{f{bCb}}}Cd}{{{f{H`}}{f{bCb}}}Cd}{H`Ad}{cc{}}0{A`Hd}1111111{BfGn}{{{f{d}}}Hb}{{{f{bd}}}{{n{C`l}}}}0{{{f{bd}}}{{n{Bfl}}}}{dGb}7{AjAd}{{}c{}}0000000091{dAn}{{{f{d}}}An}10{dAb}0<{H`Bl}{H`Cn}{{{f{bd}}}{{n{Gll}}}}{{{f{bd}}}{{n{Hfl}}}}{{{f{bd}}}{{n{Afl}}}}{{{f{bd}}}{{n{Ajl}}}}{H`Bh}{Gbd}{HfAb}{AjAn}>{H`Hd}{{{f{bd}}}{{n{Bfl}}}}7{{{f{d}}}{{n{jl}}}}{GlAn}{{{f{bd}}Bf}{{n{jl}}}}{{{f{Hb}}c}nHj}{{{f{Hd}}c}nHj}{{{f{Af}}c}nHj}{{{f{Aj}}c}nHj}{{{f{Hf}}c}nHj}{{{f{Gn}}c}nHj}{{{f{Gl}}c}nHj}{{{f{bd}}H`}j}{{{f{bd}}Hb}{{n{jl}}}}{{{f{bd}}}{{n{jl}}}}{H`Ad}1{AfAd}{H`Cn}{AfHl}{GlHl}4{AfHn}{AjHn}{HfHn}{GlHn}{fc{}}0000000{c{{n{e}}}{}{}}00000000{{}{{n{c}}}{}}00000000{fDb}00000000=====","D":"AIf","p":[[0,"mut"],[5,"XM125Radar",374],[1,"reference",null,null,1],[1,"str"],[1,"unit"],[6,"RadarError",177],[6,"Result",746,null,1],[6,"PresenceRange",21],[6,"Option",747,null,1],[1,"f32"],[5,"DistanceMeasurement",374],[6,"OutputFormat",21],[5,"PresenceMeasurement",374],[5,"Cli",21],[1,"bool"],[6,"FirmwareAction",21],[6,"FirmwareType",214],[6,"GpioAction",21],[1,"u32"],[1,"u64"],[5,"Command",748],[1,"u8"],[6,"Commands",21],[5,"String",749],[5,"Formatter",750],[8,"Result",750],[5,"ArgMatches",751],[8,"Error",752],[5,"XM125GpioPins",263],[5,"Id",753],[1,"u16"],[5,"PossibleValue",754],[5,"TypeId",755],[1,"slice"],[15,"Firmware",153],[15,"Gpio",153],[15,"Distance",153],[15,"Presence",153],[15,"Erase",169],[15,"Update",169],[15,"Verify",169],[15,"Checksum",169],[15,"Bootloader",169],[5,"Error",756],[5,"Error",757],[5,"I2CError",758],[6,"ConfigError",759],[10,"Error",760],[15,"DeviceError",210],[15,"FirmwareError",210],[15,"InvalidResponse",210],[15,"Timeout",210],[5,"FirmwareManager",214],[6,"GpioDirection",263],[6,"GpioValue",263],[5,"XM125GpioController",263],[5,"I2cDevice",350],[5,"I2cdev",758],[1,"usize"],[5,"Vec",761],[5,"Duration",762],[5,"BreathingMeasurement",374],[6,"BreathingAppState",374],[5,"XM125Config",374],[6,"DetectorMode",374],[6,"PresenceRange",374],[5,"CombinedMeasurement",374],[10,"Deserializer",763],[10,"Serializer",764],[1,"i16"],[5,"DateTime",765],[8,"Result",177]],"r":[],"b":[[197,"impl-Display-for-RadarError"],[198,"impl-Debug-for-RadarError"],[199,"impl-From%3CError%3E-for-RadarError"],[200,"impl-From%3CError%3E-for-RadarError"],[201,"impl-From%3CI2CError%3E-for-RadarError"],[203,"impl-From%3CConfigError%3E-for-RadarError"],[297,"impl-Display-for-GpioDirection"],[298,"impl-Debug-for-GpioDirection"],[299,"impl-Debug-for-GpioValue"],[300,"impl-Display-for-GpioValue"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8COwAAAAEABwAAAAkAAQAQAAAAFAAAABkAAQAfAAAAIQAAACgAAAAqAAAAMwAcAFIAAQBbAAcAaQADAHkAHwCaAAEAsgACALYACQDBAAkAzAAAAM4ACgDbAAAA3gADAOQABADrAAAA7QAAAPAAAAD2AAAA+wAHAAUBAAAKAQMAEQEVACkBBAA0AQAAPgEAAEgBBABOAQsAXwEDAGQBAQBnAQAAagEEAHABAgB0AbEAJwItAFcCAABZAgAAYAIYAHsCAACDAgAAhQIFAJQCAgCYAgAAmgIEAKECAACjAgUAqgIAAKwCCQC4AgAAugIrAA==","P":[[58,"T"],[70,""],[72,"T"],[74,""],[84,"T"],[90,""],[111,"U"],[117,""],[120,"T"],[122,""],[124,"U,T"],[130,"U"],[136,""],[195,"T"],[197,""],[202,"T"],[203,""],[204,"U"],[205,""],[207,"U,T"],[208,"U"],[209,""],[221,"T"],[225,""],[228,"T"],[229,""],[240,"T"],[242,""],[246,"U"],[248,""],[250,"T"],[251,""],[252,"U,T"],[254,"U"],[256,""],[272,"T"],[280,""],[283,"T"],[286,""],[301,"T"],[305,""],[308,"U"],[312,""],[327,"T"],[330,""],[333,"U,T"],[337,"U"],[341,""],[352,"T"],[354,""],[357,"T"],[358,""],[359,"U"],[360,""],[367,"U,T"],[368,"U"],[369,""],[551,"T"],[569,""],[579,"T"],[587,""],[608,"__D"],[615,""],[632,"T"],[634,""],[635,"T"],[642,""],[650,"U"],[659,""],[685,"__S"],[692,""],[706,"T"],[714,"U,T"],[723,"U"],[732,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[20716]}