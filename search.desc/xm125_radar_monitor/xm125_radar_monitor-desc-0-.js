searchState.loadedDescShard("xm125_radar_monitor", 0, "Check if the control script exists and is executable\nCheck if device is present in either run mode (0x52) or …\nConfigure detector with new settings\nConfigure radar based on CLI options\nReturns the argument unchanged.\nGet current firmware application ID\nGet current firmware info for firmware check command\nHandle bootloader command to put XM125 into bootloader mode\nHandle firmware management commands\nHandle firmware erase command\nCalls <code>U::from(self)</code>.\nCheck if the module is likely unprogrammed by trying to …\nPrint helpful instructions for unprogrammed modules\nPut XM125 module into bootloader mode for firmware …\nPerform breathing detection measurement (requires –mode …\nBreathing monitor firmware\nBreathing detection mode - monitors breathing patterns\nCalibrate the XM125 radar sensor\nCheck current firmware type and version\nPerform combined distance and presence measurement …\nCombined mode - both distance and presence measurements\nConfigure detector parameters (advanced)\nConnect to XM125 radar with automatic configuration and …\nComma-separated values for data analysis\nDisconnect from XM125 radar and put device in low power …\nDistance detector firmware\nDistance measurement mode - measures range to objects\nErase the XM125 chip completely\nFirmware management commands\nHuman-readable output with labels and units (default)\nGet XM125 device information and firmware details\nJSON format for programmatic processing\nLong range: 50cm to 7m (maximum detection range)\nPerform single distance measurement (requires –mode …\nMedium range: 20cm to 2m (balanced range and sensitivity)\nContinuously monitor with the configured detector mode\nPerform single presence detection (requires –mode …\nPresence detector firmware\nPresence detection mode - detects motion and presence\nShort range: 6cm to 70cm (good for close proximity …\nCheck XM125 radar status and initialization state\nUpdate firmware to match the specified detector mode\nVerify firmware integrity using checksums\nEnable auto-reconnect on connection failures (enabled by …\nEnable automatic firmware updates when detector mode doesn…\nVerify firmware after auto-updates (may cause timeouts)\nXM125 control script path\nFirmware directory path (contains .bin files)\nOutput format for measurement data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the I2C device path, using bus number if device path …\nI2C address of XM125 module in hex (e.g., 0x52 for …\nI2C bus number (will be used as /dev/i2c-N if –…\nI2C device path (e.g., /dev/i2c-2 for Sentai target)\nGPIO pin number for XM125 INT signal (optional hardware …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetector mode: distance, presence, or combined measurements\nDisable auto-reconnect (use simple connection without …\nParse I2C address from string, supporting both decimal and …\nSuppress startup banner and configuration info\nCommand timeout in seconds (how long to wait for device …\nEnable verbose debug logging (shows I2C transactions and …\nGPIO pin number for XM125 WAKEUP signal (optional hardware …\nNumber of measurements (0 or omit = infinite)\nForce reconnection even if already connected\nFrame rate for presence detection in Hz\nMeasurement interval in milliseconds (minimum ~100ms …\nDetection range length in meters (distance mode)\nPresence detection range preset (presence mode)\nReset to run mode after entering bootloader (for testing)\nSave measurements to file (CSV format)\nThreshold sensitivity (0.1 = low, 0.5 = medium, 2.0 = high)\nDetection range start in meters (distance mode)\nConfirm the erase operation (required for safety)\nTarget firmware type (distance, presence, or breathing)\nFirmware type to verify against\nForce update even if firmware already matches\nVerify firmware after update (adds delay and may timeout)\nComprehensive device manager for XM125\nDevice state information\nCheck device presence on I2C bus (non-intrusive)\nCheck if device is present on I2C bus using i2cdetect\nExtract I2C bus number from device path\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet comprehensive device information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReset device to run mode\nUpdate firmware to specified type with verification\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nXM125 Firmware Manager\nFirmware types supported by XM125\nGet the application ID expected for this firmware type\nGet the firmware binary filename\nCalculate MD5 checksum of a firmware binary file\nCheck if the control script exists and is accessible\nGet human-readable name\nPut XM125 into bootloader mode\nErase the XM125 chip completely\nCheck if firmware update is needed\nFlash firmware using stm32flash\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert application ID to firmware type\nGet MD5 checksum of currently flashed firmware\nGet full path to firmware binary\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new firmware manager\nReset XM125 to run mode\nUpdate firmware to the specified type (without …\nUpdate firmware with optional verification\nVerify device is in run mode by checking I2C bus\nVerify firmware was flashed correctly\nConfigure GPIO pins for XM125 hardware control\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the XM125 module is ready (INT pin HIGH)\nPut the XM125 module into low power mode\nWake up the XM125 module using hardware pins\nAutomatically connect with retry logic\nConfigure the detector based on the current mode\nConfigure presence detection range parameters\nAsync version of connect with detector configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet detector mode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if radar is connected\nCheck if continuous monitoring is active\nMeasure breathing patterns\nMeasure combined distance and presence\nMeasure presence detection\nRead application ID register\nReset XM125 to run mode using the control script\nSet detector mode and reconfigure if connected\nStart continuous monitoring mode\nStop continuous monitoring mode\nValidate that the current firmware matches the requested …\nWait for calibration to complete\nWait for measurement to be ready\nWrite breathing detector configuration registers\nWrite distance detector configuration registers")